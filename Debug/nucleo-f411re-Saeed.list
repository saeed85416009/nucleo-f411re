
nucleo-f411re-Saeed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800353c  0800353c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003544  08003544  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800354c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000078  080035c4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080035c4  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d60  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c9f  00000000  00000000  00029e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  0002baa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e0  00000000  00000000  0002c270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016849  00000000  00000000  0002c950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fb9  00000000  00000000  00043199  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000855c9  00000000  00000000  0004b152  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d071b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000270c  00000000  00000000  000d0798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003450 	.word	0x08003450

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08003450 	.word	0x08003450

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <HAL_Init+0x40>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <HAL_Init+0x40>)
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <HAL_Init+0x40>)
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f92b 	bl	800076c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	2000      	movs	r0, #0
 8000518:	f000 f808 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f001 ff44 	bl	80023a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f943 	bl	80007d6 <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f90b 	bl	8000782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000008 	.word	0x20000008
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000154 	.word	0x20000154

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000154 	.word	0x20000154

080005cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	2b00      	cmp	r3, #0
 8000640:	db0b      	blt.n	800065a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 021f 	and.w	r2, r3, #31
 8000648:	4907      	ldr	r1, [pc, #28]	; (8000668 <__NVIC_EnableIRQ+0x38>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	095b      	lsrs	r3, r3, #5
 8000650:	2001      	movs	r0, #1
 8000652:	fa00 f202 	lsl.w	r2, r0, r2
 8000656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e100 	.word	0xe000e100

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	; (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	; (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000738:	d301      	bcc.n	800073e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2301      	movs	r3, #1
 800073c:	e00f      	b.n	800075e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <SysTick_Config+0x40>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000746:	210f      	movs	r1, #15
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f7ff ff8e 	bl	800066c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SysTick_Config+0x40>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <SysTick_Config+0x40>)
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010

0800076c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff29 	bl	80005cc <__NVIC_SetPriorityGrouping>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000794:	f7ff ff3e 	bl	8000614 <__NVIC_GetPriorityGrouping>
 8000798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	6978      	ldr	r0, [r7, #20]
 80007a0:	f7ff ff8e 	bl	80006c0 <NVIC_EncodePriority>
 80007a4:	4602      	mov	r2, r0
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff5d 	bl	800066c <__NVIC_SetPriority>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff31 	bl	8000630 <__NVIC_EnableIRQ>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffa2 	bl	8000728 <SysTick_Config>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <HAL_FLASH_Program+0xa0>)
 8000804:	7e1b      	ldrb	r3, [r3, #24]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d101      	bne.n	800080e <HAL_FLASH_Program+0x1e>
 800080a:	2302      	movs	r3, #2
 800080c:	e03b      	b.n	8000886 <HAL_FLASH_Program+0x96>
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <HAL_FLASH_Program+0xa0>)
 8000810:	2201      	movs	r2, #1
 8000812:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000814:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000818:	f000 f870 	bl	80008fc <FLASH_WaitForLastOperation>
 800081c:	4603      	mov	r3, r0
 800081e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000820:	7dfb      	ldrb	r3, [r7, #23]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d12b      	bne.n	800087e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d105      	bne.n	8000838 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800082c:	783b      	ldrb	r3, [r7, #0]
 800082e:	4619      	mov	r1, r3
 8000830:	68b8      	ldr	r0, [r7, #8]
 8000832:	f000 f919 	bl	8000a68 <FLASH_Program_Byte>
 8000836:	e016      	b.n	8000866 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d105      	bne.n	800084a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800083e:	883b      	ldrh	r3, [r7, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	68b8      	ldr	r0, [r7, #8]
 8000844:	f000 f8ec 	bl	8000a20 <FLASH_Program_HalfWord>
 8000848:	e00d      	b.n	8000866 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d105      	bne.n	800085c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	68b8      	ldr	r0, [r7, #8]
 8000856:	f000 f8c1 	bl	80009dc <FLASH_Program_Word>
 800085a:	e004      	b.n	8000866 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800085c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000860:	68b8      	ldr	r0, [r7, #8]
 8000862:	f000 f88b 	bl	800097c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000866:	f24c 3050 	movw	r0, #50000	; 0xc350
 800086a:	f000 f847 	bl	80008fc <FLASH_WaitForLastOperation>
 800086e:	4603      	mov	r3, r0
 8000870:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_FLASH_Program+0xa4>)
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_FLASH_Program+0xa4>)
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <HAL_FLASH_Program+0xa0>)
 8000880:	2200      	movs	r2, #0
 8000882:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000884:	7dfb      	ldrb	r3, [r7, #23]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000158 	.word	0x20000158
 8000894:	40023c00 	.word	0x40023c00

08000898 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_FLASH_Unlock+0x38>)
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	da0b      	bge.n	80008c2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_FLASH_Unlock+0x38>)
 80008ac:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <HAL_FLASH_Unlock+0x3c>)
 80008ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_FLASH_Unlock+0x38>)
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <HAL_FLASH_Unlock+0x40>)
 80008b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_FLASH_Unlock+0x38>)
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da01      	bge.n	80008c2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	40023c00 	.word	0x40023c00
 80008d4:	45670123 	.word	0x45670123
 80008d8:	cdef89ab 	.word	0xcdef89ab

080008dc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_FLASH_Lock+0x1c>)
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_FLASH_Lock+0x1c>)
 80008e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	40023c00 	.word	0x40023c00

080008fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <FLASH_WaitForLastOperation+0x78>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800090e:	f7ff fe51 	bl	80005b4 <HAL_GetTick>
 8000912:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000914:	e010      	b.n	8000938 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091c:	d00c      	beq.n	8000938 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d007      	beq.n	8000934 <FLASH_WaitForLastOperation+0x38>
 8000924:	f7ff fe46 	bl	80005b4 <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	429a      	cmp	r2, r3
 8000932:	d201      	bcs.n	8000938 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e019      	b.n	800096c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <FLASH_WaitForLastOperation+0x7c>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1e8      	bne.n	8000916 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <FLASH_WaitForLastOperation+0x7c>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <FLASH_WaitForLastOperation+0x7c>)
 8000952:	2201      	movs	r2, #1
 8000954:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <FLASH_WaitForLastOperation+0x7c>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000962:	f000 f8a3 	bl	8000aac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
  
}  
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000158 	.word	0x20000158
 8000978:	40023c00 	.word	0x40023c00

0800097c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800097c:	b490      	push	{r4, r7}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <FLASH_Program_DoubleWord+0x5c>)
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <FLASH_Program_DoubleWord+0x5c>)
 800098e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000992:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <FLASH_Program_DoubleWord+0x5c>)
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <FLASH_Program_DoubleWord+0x5c>)
 800099a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800099e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <FLASH_Program_DoubleWord+0x5c>)
 80009a2:	691b      	ldr	r3, [r3, #16]
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <FLASH_Program_DoubleWord+0x5c>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80009b2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80009b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80009ba:	f04f 0300 	mov.w	r3, #0
 80009be:	f04f 0400 	mov.w	r4, #0
 80009c2:	0013      	movs	r3, r2
 80009c4:	2400      	movs	r4, #0
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	3204      	adds	r2, #4
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc90      	pop	{r4, r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40023c00 	.word	0x40023c00

080009dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <FLASH_Program_Word+0x40>)
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <FLASH_Program_Word+0x40>)
 80009ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <FLASH_Program_Word+0x40>)
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <FLASH_Program_Word+0x40>)
 80009f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <FLASH_Program_Word+0x40>)
 8000a00:	691b      	ldr	r3, [r3, #16]
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <FLASH_Program_Word+0x40>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	40023c00 	.word	0x40023c00

08000a20 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <FLASH_Program_HalfWord+0x44>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <FLASH_Program_HalfWord+0x44>)
 8000a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <FLASH_Program_HalfWord+0x44>)
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <FLASH_Program_HalfWord+0x44>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <FLASH_Program_HalfWord+0x44>)
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <FLASH_Program_HalfWord+0x44>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	887a      	ldrh	r2, [r7, #2]
 8000a54:	801a      	strh	r2, [r3, #0]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <FLASH_Program_Byte+0x40>)
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <FLASH_Program_Byte+0x40>)
 8000a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <FLASH_Program_Byte+0x40>)
 8000a82:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <FLASH_Program_Byte+0x40>)
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <FLASH_Program_Byte+0x40>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <FLASH_Program_Byte+0x40>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	78fa      	ldrb	r2, [r7, #3]
 8000a98:	701a      	strb	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d008      	beq.n	8000ace <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	f043 0310 	orr.w	r3, r3, #16
 8000ac4:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000ac6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000aca:	2210      	movs	r2, #16
 8000acc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	f003 0320 	and.w	r3, r3, #32
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d008      	beq.n	8000aec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000ae4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000ae8:	2220      	movs	r2, #32
 8000aea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d008      	beq.n	8000b0a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000afa:	69db      	ldr	r3, [r3, #28]
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000b02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000b06:	2240      	movs	r2, #64	; 0x40
 8000b08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d008      	beq.n	8000b28 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000b20:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d009      	beq.n	8000b48 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000b3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b46:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d008      	beq.n	8000b66 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	f043 0320 	orr.w	r3, r3, #32
 8000b5c:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <FLASH_SetErrorCode+0xc8>)
 8000b5e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <FLASH_SetErrorCode+0xc4>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	60da      	str	r2, [r3, #12]
  }
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40023c00 	.word	0x40023c00
 8000b74:	20000158 	.word	0x20000158

08000b78 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	e010      	b.n	8000bb6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d103      	bne.n	8000ba2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	e009      	b.n	8000bb6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d103      	bne.n	8000bb0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8000ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	e002      	b.n	8000bb6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000bb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <FLASH_Erase_Sector+0x8c>)
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <FLASH_Erase_Sector+0x8c>)
 8000bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <FLASH_Erase_Sector+0x8c>)
 8000bc4:	691a      	ldr	r2, [r3, #16]
 8000bc6:	490f      	ldr	r1, [pc, #60]	; (8000c04 <FLASH_Erase_Sector+0x8c>)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <FLASH_Erase_Sector+0x8c>)
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <FLASH_Erase_Sector+0x8c>)
 8000bd4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <FLASH_Erase_Sector+0x8c>)
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <FLASH_Erase_Sector+0x8c>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <FLASH_Erase_Sector+0x8c>)
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <FLASH_Erase_Sector+0x8c>)
 8000bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf6:	6113      	str	r3, [r2, #16]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	e159      	b.n	8000ed8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c24:	2201      	movs	r2, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	f040 8148 	bne.w	8000ed2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d00b      	beq.n	8000c62 <HAL_GPIO_Init+0x5a>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d007      	beq.n	8000c62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c56:	2b11      	cmp	r3, #17
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b12      	cmp	r3, #18
 8000c60:	d130      	bne.n	8000cc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4013      	ands	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	091b      	lsrs	r3, r3, #4
 8000cae:	f003 0201 	and.w	r2, r3, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0xfc>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b12      	cmp	r3, #18
 8000d02:	d123      	bne.n	8000d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3208      	adds	r2, #8
 8000d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	69b9      	ldr	r1, [r7, #24]
 8000d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0203 	and.w	r2, r3, #3
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 80a2 	beq.w	8000ed2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b56      	ldr	r3, [pc, #344]	; (8000eec <HAL_GPIO_Init+0x2e4>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a55      	ldr	r2, [pc, #340]	; (8000eec <HAL_GPIO_Init+0x2e4>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b53      	ldr	r3, [pc, #332]	; (8000eec <HAL_GPIO_Init+0x2e4>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000daa:	4a51      	ldr	r2, [pc, #324]	; (8000ef0 <HAL_GPIO_Init+0x2e8>)
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3302      	adds	r3, #2
 8000db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a48      	ldr	r2, [pc, #288]	; (8000ef4 <HAL_GPIO_Init+0x2ec>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d019      	beq.n	8000e0a <HAL_GPIO_Init+0x202>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a47      	ldr	r2, [pc, #284]	; (8000ef8 <HAL_GPIO_Init+0x2f0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0x1fe>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a46      	ldr	r2, [pc, #280]	; (8000efc <HAL_GPIO_Init+0x2f4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00d      	beq.n	8000e02 <HAL_GPIO_Init+0x1fa>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a45      	ldr	r2, [pc, #276]	; (8000f00 <HAL_GPIO_Init+0x2f8>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x1f6>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a44      	ldr	r2, [pc, #272]	; (8000f04 <HAL_GPIO_Init+0x2fc>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_GPIO_Init+0x1f2>
 8000df6:	2304      	movs	r3, #4
 8000df8:	e008      	b.n	8000e0c <HAL_GPIO_Init+0x204>
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x204>
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e004      	b.n	8000e0c <HAL_GPIO_Init+0x204>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e002      	b.n	8000e0c <HAL_GPIO_Init+0x204>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <HAL_GPIO_Init+0x204>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	69fa      	ldr	r2, [r7, #28]
 8000e0e:	f002 0203 	and.w	r2, r2, #3
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	4093      	lsls	r3, r2
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e1c:	4934      	ldr	r1, [pc, #208]	; (8000ef0 <HAL_GPIO_Init+0x2e8>)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2a:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <HAL_GPIO_Init+0x300>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e4e:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <HAL_GPIO_Init+0x300>)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e54:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <HAL_GPIO_Init+0x300>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e78:	4a23      	ldr	r2, [pc, #140]	; (8000f08 <HAL_GPIO_Init+0x300>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <HAL_GPIO_Init+0x300>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea2:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <HAL_GPIO_Init+0x300>)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_GPIO_Init+0x300>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_GPIO_Init+0x300>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	f67f aea2 	bls.w	8000c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3724      	adds	r7, #36	; 0x24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40013c00 	.word	0x40013c00

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f4c:	695a      	ldr	r2, [r3, #20]
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fa14 	bl	800238c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40013c00 	.word	0x40013c00

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e25b      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d075      	beq.n	800107a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f8e:	4ba3      	ldr	r3, [pc, #652]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	d00c      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9a:	4ba0      	ldr	r3, [pc, #640]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d112      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa6:	4b9d      	ldr	r3, [pc, #628]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fb2:	d10b      	bne.n	8000fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	4b99      	ldr	r3, [pc, #612]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d05b      	beq.n	8001078 <HAL_RCC_OscConfig+0x108>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d157      	bne.n	8001078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e236      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d106      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x74>
 8000fd6:	4b91      	ldr	r3, [pc, #580]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a90      	ldr	r2, [pc, #576]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e01d      	b.n	8001020 <HAL_RCC_OscConfig+0xb0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fec:	d10c      	bne.n	8001008 <HAL_RCC_OscConfig+0x98>
 8000fee:	4b8b      	ldr	r3, [pc, #556]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a8a      	ldr	r2, [pc, #552]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b88      	ldr	r3, [pc, #544]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a87      	ldr	r2, [pc, #540]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8001000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	e00b      	b.n	8001020 <HAL_RCC_OscConfig+0xb0>
 8001008:	4b84      	ldr	r3, [pc, #528]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a83      	ldr	r2, [pc, #524]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 800100e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b81      	ldr	r3, [pc, #516]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a80      	ldr	r2, [pc, #512]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 800101a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d013      	beq.n	8001050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fac4 	bl	80005b4 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fac0 	bl	80005b4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	; 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e1fb      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b76      	ldr	r3, [pc, #472]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0xc0>
 800104e:	e014      	b.n	800107a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fab0 	bl	80005b4 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff faac 	bl	80005b4 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e1e7      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106a:	4b6c      	ldr	r3, [pc, #432]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0xe8>
 8001076:	e000      	b.n	800107a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d063      	beq.n	800114e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001086:	4b65      	ldr	r3, [pc, #404]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00b      	beq.n	80010aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001092:	4b62      	ldr	r3, [pc, #392]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800109a:	2b08      	cmp	r3, #8
 800109c:	d11c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109e:	4b5f      	ldr	r3, [pc, #380]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d116      	bne.n	80010d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <HAL_RCC_OscConfig+0x152>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d001      	beq.n	80010c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e1bb      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	4b56      	ldr	r3, [pc, #344]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4952      	ldr	r1, [pc, #328]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	e03a      	b.n	800114e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d020      	beq.n	8001122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e0:	4b4f      	ldr	r3, [pc, #316]	; (8001220 <HAL_RCC_OscConfig+0x2b0>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e6:	f7ff fa65 	bl	80005b4 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fa61 	bl	80005b4 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e19c      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	4b46      	ldr	r3, [pc, #280]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b43      	ldr	r3, [pc, #268]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4940      	ldr	r1, [pc, #256]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
 8001120:	e015      	b.n	800114e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001122:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <HAL_RCC_OscConfig+0x2b0>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fa44 	bl	80005b4 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001130:	f7ff fa40 	bl	80005b4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e17b      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d030      	beq.n	80011bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d016      	beq.n	8001190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_RCC_OscConfig+0x2b4>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fa24 	bl	80005b4 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fa20 	bl	80005b4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e15b      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 8001184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0x200>
 800118e:	e015      	b.n	80011bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <HAL_RCC_OscConfig+0x2b4>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001196:	f7ff fa0d 	bl	80005b4 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119e:	f7ff fa09 	bl	80005b4 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e144      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80a0 	beq.w	800130a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10f      	bne.n	80011fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_RCC_OscConfig+0x2b8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001202:	2b00      	cmp	r3, #0
 8001204:	d121      	bne.n	800124a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_RCC_OscConfig+0x2b8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_RCC_OscConfig+0x2b8>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001212:	f7ff f9cf 	bl	80005b4 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	e011      	b.n	800123e <HAL_RCC_OscConfig+0x2ce>
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	42470000 	.word	0x42470000
 8001224:	42470e80 	.word	0x42470e80
 8001228:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122c:	f7ff f9c2 	bl	80005b4 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e0fd      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123e:	4b81      	ldr	r3, [pc, #516]	; (8001444 <HAL_RCC_OscConfig+0x4d4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d106      	bne.n	8001260 <HAL_RCC_OscConfig+0x2f0>
 8001252:	4b7d      	ldr	r3, [pc, #500]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 8001254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001256:	4a7c      	ldr	r2, [pc, #496]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6713      	str	r3, [r2, #112]	; 0x70
 800125e:	e01c      	b.n	800129a <HAL_RCC_OscConfig+0x32a>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b05      	cmp	r3, #5
 8001266:	d10c      	bne.n	8001282 <HAL_RCC_OscConfig+0x312>
 8001268:	4b77      	ldr	r3, [pc, #476]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 800126a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126c:	4a76      	ldr	r2, [pc, #472]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6713      	str	r3, [r2, #112]	; 0x70
 8001274:	4b74      	ldr	r3, [pc, #464]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001278:	4a73      	ldr	r2, [pc, #460]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6713      	str	r3, [r2, #112]	; 0x70
 8001280:	e00b      	b.n	800129a <HAL_RCC_OscConfig+0x32a>
 8001282:	4b71      	ldr	r3, [pc, #452]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 8001284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001286:	4a70      	ldr	r2, [pc, #448]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6713      	str	r3, [r2, #112]	; 0x70
 800128e:	4b6e      	ldr	r3, [pc, #440]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 8001290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001292:	4a6d      	ldr	r2, [pc, #436]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 8001294:	f023 0304 	bic.w	r3, r3, #4
 8001298:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d015      	beq.n	80012ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a2:	f7ff f987 	bl	80005b4 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	e00a      	b.n	80012c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012aa:	f7ff f983 	bl	80005b4 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e0bc      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c0:	4b61      	ldr	r3, [pc, #388]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0ee      	beq.n	80012aa <HAL_RCC_OscConfig+0x33a>
 80012cc:	e014      	b.n	80012f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff f971 	bl	80005b4 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff f96d 	bl	80005b4 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0a6      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ec:	4b56      	ldr	r3, [pc, #344]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 80012ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ee      	bne.n	80012d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d105      	bne.n	800130a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fe:	4b52      	ldr	r3, [pc, #328]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 8001304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8092 	beq.w	8001438 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001314:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b08      	cmp	r3, #8
 800131e:	d05c      	beq.n	80013da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d141      	bne.n	80013ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001328:	4b48      	ldr	r3, [pc, #288]	; (800144c <HAL_RCC_OscConfig+0x4dc>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff f941 	bl	80005b4 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001336:	f7ff f93d 	bl	80005b4 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e078      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001348:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f0      	bne.n	8001336 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69da      	ldr	r2, [r3, #28]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	019b      	lsls	r3, r3, #6
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	3b01      	subs	r3, #1
 800136e:	041b      	lsls	r3, r3, #16
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001376:	061b      	lsls	r3, r3, #24
 8001378:	4933      	ldr	r1, [pc, #204]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <HAL_RCC_OscConfig+0x4dc>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff f916 	bl	80005b4 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff f912 	bl	80005b4 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e04d      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x41c>
 80013aa:	e045      	b.n	8001438 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_RCC_OscConfig+0x4dc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff f8ff 	bl	80005b4 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff f8fb 	bl	80005b4 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e036      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x44a>
 80013d8:	e02e      	b.n	8001438 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e029      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_RCC_OscConfig+0x4d8>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d11c      	bne.n	8001434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001404:	429a      	cmp	r2, r3
 8001406:	d115      	bne.n	8001434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800140e:	4013      	ands	r3, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001414:	4293      	cmp	r3, r2
 8001416:	d10d      	bne.n	8001434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001422:	429a      	cmp	r2, r3
 8001424:	d106      	bne.n	8001434 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40007000 	.word	0x40007000
 8001448:	40023800 	.word	0x40023800
 800144c:	42470060 	.word	0x42470060

08001450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0cc      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b68      	ldr	r3, [pc, #416]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d90c      	bls.n	800148c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b65      	ldr	r3, [pc, #404]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147a:	4b63      	ldr	r3, [pc, #396]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0b8      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a4:	4b59      	ldr	r3, [pc, #356]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4a58      	ldr	r2, [pc, #352]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014bc:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a52      	ldr	r2, [pc, #328]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c8:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	494d      	ldr	r1, [pc, #308]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d044      	beq.n	8001570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d119      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e07f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d003      	beq.n	800150e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150a:	2b03      	cmp	r3, #3
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e06f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	4b3b      	ldr	r3, [pc, #236]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e067      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4b37      	ldr	r3, [pc, #220]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f023 0203 	bic.w	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4934      	ldr	r1, [pc, #208]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	4313      	orrs	r3, r2
 800153e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001540:	f7ff f838 	bl	80005b4 <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	e00a      	b.n	800155e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001548:	f7ff f834 	bl	80005b4 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e04f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 020c 	and.w	r2, r3, #12
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	429a      	cmp	r2, r3
 800156e:	d1eb      	bne.n	8001548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d20c      	bcs.n	8001598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e032      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4916      	ldr	r1, [pc, #88]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	490e      	ldr	r1, [pc, #56]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015d6:	f000 f821 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80015da:	4601      	mov	r1, r0
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	5cd3      	ldrb	r3, [r2, r3]
 80015ea:	fa21 f303 	lsr.w	r3, r1, r3
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff98 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023c00 	.word	0x40023c00
 800160c:	40023800 	.word	0x40023800
 8001610:	080034a4 	.word	0x080034a4
 8001614:	20000008 	.word	0x20000008
 8001618:	20000000 	.word	0x20000000

0800161c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001632:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d007      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x32>
 800163e:	2b08      	cmp	r3, #8
 8001640:	d008      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x38>
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 80b4 	bne.w	80017b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800164a:	60bb      	str	r3, [r7, #8]
       break;
 800164c:	e0b3      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800164e:	4b5e      	ldr	r3, [pc, #376]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001650:	60bb      	str	r3, [r7, #8]
      break;
 8001652:	e0b0      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001654:	4b5a      	ldr	r3, [pc, #360]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800165c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800165e:	4b58      	ldr	r3, [pc, #352]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d04a      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166a:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	099b      	lsrs	r3, r3, #6
 8001670:	f04f 0400 	mov.w	r4, #0
 8001674:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	ea03 0501 	and.w	r5, r3, r1
 8001680:	ea04 0602 	and.w	r6, r4, r2
 8001684:	4629      	mov	r1, r5
 8001686:	4632      	mov	r2, r6
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	f04f 0400 	mov.w	r4, #0
 8001690:	0154      	lsls	r4, r2, #5
 8001692:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001696:	014b      	lsls	r3, r1, #5
 8001698:	4619      	mov	r1, r3
 800169a:	4622      	mov	r2, r4
 800169c:	1b49      	subs	r1, r1, r5
 800169e:	eb62 0206 	sbc.w	r2, r2, r6
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	f04f 0400 	mov.w	r4, #0
 80016aa:	0194      	lsls	r4, r2, #6
 80016ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016b0:	018b      	lsls	r3, r1, #6
 80016b2:	1a5b      	subs	r3, r3, r1
 80016b4:	eb64 0402 	sbc.w	r4, r4, r2
 80016b8:	f04f 0100 	mov.w	r1, #0
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	00e2      	lsls	r2, r4, #3
 80016c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016c6:	00d9      	lsls	r1, r3, #3
 80016c8:	460b      	mov	r3, r1
 80016ca:	4614      	mov	r4, r2
 80016cc:	195b      	adds	r3, r3, r5
 80016ce:	eb44 0406 	adc.w	r4, r4, r6
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	0262      	lsls	r2, r4, #9
 80016dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80016e0:	0259      	lsls	r1, r3, #9
 80016e2:	460b      	mov	r3, r1
 80016e4:	4614      	mov	r4, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	4621      	mov	r1, r4
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 0400 	mov.w	r4, #0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4623      	mov	r3, r4
 80016f4:	f7fe fd78 	bl	80001e8 <__aeabi_uldivmod>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	e049      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001700:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	f04f 0400 	mov.w	r4, #0
 800170a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	ea03 0501 	and.w	r5, r3, r1
 8001716:	ea04 0602 	and.w	r6, r4, r2
 800171a:	4629      	mov	r1, r5
 800171c:	4632      	mov	r2, r6
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	f04f 0400 	mov.w	r4, #0
 8001726:	0154      	lsls	r4, r2, #5
 8001728:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800172c:	014b      	lsls	r3, r1, #5
 800172e:	4619      	mov	r1, r3
 8001730:	4622      	mov	r2, r4
 8001732:	1b49      	subs	r1, r1, r5
 8001734:	eb62 0206 	sbc.w	r2, r2, r6
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	f04f 0400 	mov.w	r4, #0
 8001740:	0194      	lsls	r4, r2, #6
 8001742:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001746:	018b      	lsls	r3, r1, #6
 8001748:	1a5b      	subs	r3, r3, r1
 800174a:	eb64 0402 	sbc.w	r4, r4, r2
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	00e2      	lsls	r2, r4, #3
 8001758:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800175c:	00d9      	lsls	r1, r3, #3
 800175e:	460b      	mov	r3, r1
 8001760:	4614      	mov	r4, r2
 8001762:	195b      	adds	r3, r3, r5
 8001764:	eb44 0406 	adc.w	r4, r4, r6
 8001768:	f04f 0100 	mov.w	r1, #0
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	02a2      	lsls	r2, r4, #10
 8001772:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001776:	0299      	lsls	r1, r3, #10
 8001778:	460b      	mov	r3, r1
 800177a:	4614      	mov	r4, r2
 800177c:	4618      	mov	r0, r3
 800177e:	4621      	mov	r1, r4
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f04f 0400 	mov.w	r4, #0
 8001786:	461a      	mov	r2, r3
 8001788:	4623      	mov	r3, r4
 800178a:	f7fe fd2d 	bl	80001e8 <__aeabi_uldivmod>
 800178e:	4603      	mov	r3, r0
 8001790:	460c      	mov	r4, r1
 8001792:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	3301      	adds	r3, #1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	60bb      	str	r3, [r7, #8]
      break;
 80017ae:	e002      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017b2:	60bb      	str	r3, [r7, #8]
      break;
 80017b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b6:	68bb      	ldr	r3, [r7, #8]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	00f42400 	.word	0x00f42400
 80017c8:	007a1200 	.word	0x007a1200

080017cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000008 	.word	0x20000008

080017e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017e8:	f7ff fff0 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 80017ec:	4601      	mov	r1, r0
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	0a9b      	lsrs	r3, r3, #10
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	4a03      	ldr	r2, [pc, #12]	; (8001808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	080034b4 	.word	0x080034b4

0800180c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001810:	f7ff ffdc 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 8001814:	4601      	mov	r1, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	0b5b      	lsrs	r3, r3, #13
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4a03      	ldr	r2, [pc, #12]	; (8001830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	080034b4 	.word	0x080034b4

08001834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e03f      	b.n	80018c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fdcc 	bl	80023f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2224      	movs	r2, #36	; 0x24
 8001864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f829 	bl	80018d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800188c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800189c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2220      	movs	r2, #32
 80018b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	4313      	orrs	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001912:	f023 030c 	bic.w	r3, r3, #12
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	68f9      	ldr	r1, [r7, #12]
 800191c:	430b      	orrs	r3, r1
 800191e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800193e:	f040 818b 	bne.w	8001c58 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4ac1      	ldr	r2, [pc, #772]	; (8001c4c <UART_SetConfig+0x37c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d005      	beq.n	8001958 <UART_SetConfig+0x88>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4abf      	ldr	r2, [pc, #764]	; (8001c50 <UART_SetConfig+0x380>)
 8001952:	4293      	cmp	r3, r2
 8001954:	f040 80bd 	bne.w	8001ad2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001958:	f7ff ff58 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 800195c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	461d      	mov	r5, r3
 8001962:	f04f 0600 	mov.w	r6, #0
 8001966:	46a8      	mov	r8, r5
 8001968:	46b1      	mov	r9, r6
 800196a:	eb18 0308 	adds.w	r3, r8, r8
 800196e:	eb49 0409 	adc.w	r4, r9, r9
 8001972:	4698      	mov	r8, r3
 8001974:	46a1      	mov	r9, r4
 8001976:	eb18 0805 	adds.w	r8, r8, r5
 800197a:	eb49 0906 	adc.w	r9, r9, r6
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800198a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800198e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001992:	4688      	mov	r8, r1
 8001994:	4691      	mov	r9, r2
 8001996:	eb18 0005 	adds.w	r0, r8, r5
 800199a:	eb49 0106 	adc.w	r1, r9, r6
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	461d      	mov	r5, r3
 80019a4:	f04f 0600 	mov.w	r6, #0
 80019a8:	196b      	adds	r3, r5, r5
 80019aa:	eb46 0406 	adc.w	r4, r6, r6
 80019ae:	461a      	mov	r2, r3
 80019b0:	4623      	mov	r3, r4
 80019b2:	f7fe fc19 	bl	80001e8 <__aeabi_uldivmod>
 80019b6:	4603      	mov	r3, r0
 80019b8:	460c      	mov	r4, r1
 80019ba:	461a      	mov	r2, r3
 80019bc:	4ba5      	ldr	r3, [pc, #660]	; (8001c54 <UART_SetConfig+0x384>)
 80019be:	fba3 2302 	umull	r2, r3, r3, r2
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	461d      	mov	r5, r3
 80019cc:	f04f 0600 	mov.w	r6, #0
 80019d0:	46a9      	mov	r9, r5
 80019d2:	46b2      	mov	sl, r6
 80019d4:	eb19 0309 	adds.w	r3, r9, r9
 80019d8:	eb4a 040a 	adc.w	r4, sl, sl
 80019dc:	4699      	mov	r9, r3
 80019de:	46a2      	mov	sl, r4
 80019e0:	eb19 0905 	adds.w	r9, r9, r5
 80019e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80019f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80019fc:	4689      	mov	r9, r1
 80019fe:	4692      	mov	sl, r2
 8001a00:	eb19 0005 	adds.w	r0, r9, r5
 8001a04:	eb4a 0106 	adc.w	r1, sl, r6
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	f04f 0600 	mov.w	r6, #0
 8001a12:	196b      	adds	r3, r5, r5
 8001a14:	eb46 0406 	adc.w	r4, r6, r6
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	f7fe fbe4 	bl	80001e8 <__aeabi_uldivmod>
 8001a20:	4603      	mov	r3, r0
 8001a22:	460c      	mov	r4, r1
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b8b      	ldr	r3, [pc, #556]	; (8001c54 <UART_SetConfig+0x384>)
 8001a28:	fba3 1302 	umull	r1, r3, r3, r2
 8001a2c:	095b      	lsrs	r3, r3, #5
 8001a2e:	2164      	movs	r1, #100	; 0x64
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	3332      	adds	r3, #50	; 0x32
 8001a3a:	4a86      	ldr	r2, [pc, #536]	; (8001c54 <UART_SetConfig+0x384>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	095b      	lsrs	r3, r3, #5
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001a48:	4498      	add	r8, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	461d      	mov	r5, r3
 8001a4e:	f04f 0600 	mov.w	r6, #0
 8001a52:	46a9      	mov	r9, r5
 8001a54:	46b2      	mov	sl, r6
 8001a56:	eb19 0309 	adds.w	r3, r9, r9
 8001a5a:	eb4a 040a 	adc.w	r4, sl, sl
 8001a5e:	4699      	mov	r9, r3
 8001a60:	46a2      	mov	sl, r4
 8001a62:	eb19 0905 	adds.w	r9, r9, r5
 8001a66:	eb4a 0a06 	adc.w	sl, sl, r6
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001a7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001a7e:	4689      	mov	r9, r1
 8001a80:	4692      	mov	sl, r2
 8001a82:	eb19 0005 	adds.w	r0, r9, r5
 8001a86:	eb4a 0106 	adc.w	r1, sl, r6
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	461d      	mov	r5, r3
 8001a90:	f04f 0600 	mov.w	r6, #0
 8001a94:	196b      	adds	r3, r5, r5
 8001a96:	eb46 0406 	adc.w	r4, r6, r6
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4623      	mov	r3, r4
 8001a9e:	f7fe fba3 	bl	80001e8 <__aeabi_uldivmod>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <UART_SetConfig+0x384>)
 8001aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2164      	movs	r1, #100	; 0x64
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	3332      	adds	r3, #50	; 0x32
 8001abc:	4a65      	ldr	r2, [pc, #404]	; (8001c54 <UART_SetConfig+0x384>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	f003 0207 	and.w	r2, r3, #7
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4442      	add	r2, r8
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	e26f      	b.n	8001fb2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ad2:	f7ff fe87 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001ad6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	461d      	mov	r5, r3
 8001adc:	f04f 0600 	mov.w	r6, #0
 8001ae0:	46a8      	mov	r8, r5
 8001ae2:	46b1      	mov	r9, r6
 8001ae4:	eb18 0308 	adds.w	r3, r8, r8
 8001ae8:	eb49 0409 	adc.w	r4, r9, r9
 8001aec:	4698      	mov	r8, r3
 8001aee:	46a1      	mov	r9, r4
 8001af0:	eb18 0805 	adds.w	r8, r8, r5
 8001af4:	eb49 0906 	adc.w	r9, r9, r6
 8001af8:	f04f 0100 	mov.w	r1, #0
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001b04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001b08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001b0c:	4688      	mov	r8, r1
 8001b0e:	4691      	mov	r9, r2
 8001b10:	eb18 0005 	adds.w	r0, r8, r5
 8001b14:	eb49 0106 	adc.w	r1, r9, r6
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	f04f 0600 	mov.w	r6, #0
 8001b22:	196b      	adds	r3, r5, r5
 8001b24:	eb46 0406 	adc.w	r4, r6, r6
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	f7fe fb5c 	bl	80001e8 <__aeabi_uldivmod>
 8001b30:	4603      	mov	r3, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <UART_SetConfig+0x384>)
 8001b38:	fba3 2302 	umull	r2, r3, r3, r2
 8001b3c:	095b      	lsrs	r3, r3, #5
 8001b3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	461d      	mov	r5, r3
 8001b46:	f04f 0600 	mov.w	r6, #0
 8001b4a:	46a9      	mov	r9, r5
 8001b4c:	46b2      	mov	sl, r6
 8001b4e:	eb19 0309 	adds.w	r3, r9, r9
 8001b52:	eb4a 040a 	adc.w	r4, sl, sl
 8001b56:	4699      	mov	r9, r3
 8001b58:	46a2      	mov	sl, r4
 8001b5a:	eb19 0905 	adds.w	r9, r9, r5
 8001b5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001b72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001b76:	4689      	mov	r9, r1
 8001b78:	4692      	mov	sl, r2
 8001b7a:	eb19 0005 	adds.w	r0, r9, r5
 8001b7e:	eb4a 0106 	adc.w	r1, sl, r6
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	461d      	mov	r5, r3
 8001b88:	f04f 0600 	mov.w	r6, #0
 8001b8c:	196b      	adds	r3, r5, r5
 8001b8e:	eb46 0406 	adc.w	r4, r6, r6
 8001b92:	461a      	mov	r2, r3
 8001b94:	4623      	mov	r3, r4
 8001b96:	f7fe fb27 	bl	80001e8 <__aeabi_uldivmod>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	460c      	mov	r4, r1
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <UART_SetConfig+0x384>)
 8001ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2164      	movs	r1, #100	; 0x64
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	3332      	adds	r3, #50	; 0x32
 8001bb4:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <UART_SetConfig+0x384>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001bc2:	4498      	add	r8, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	461d      	mov	r5, r3
 8001bc8:	f04f 0600 	mov.w	r6, #0
 8001bcc:	46a9      	mov	r9, r5
 8001bce:	46b2      	mov	sl, r6
 8001bd0:	eb19 0309 	adds.w	r3, r9, r9
 8001bd4:	eb4a 040a 	adc.w	r4, sl, sl
 8001bd8:	4699      	mov	r9, r3
 8001bda:	46a2      	mov	sl, r4
 8001bdc:	eb19 0905 	adds.w	r9, r9, r5
 8001be0:	eb4a 0a06 	adc.w	sl, sl, r6
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001bf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001bf8:	4689      	mov	r9, r1
 8001bfa:	4692      	mov	sl, r2
 8001bfc:	eb19 0005 	adds.w	r0, r9, r5
 8001c00:	eb4a 0106 	adc.w	r1, sl, r6
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	461d      	mov	r5, r3
 8001c0a:	f04f 0600 	mov.w	r6, #0
 8001c0e:	196b      	adds	r3, r5, r5
 8001c10:	eb46 0406 	adc.w	r4, r6, r6
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	f7fe fae6 	bl	80001e8 <__aeabi_uldivmod>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <UART_SetConfig+0x384>)
 8001c24:	fba3 1302 	umull	r1, r3, r3, r2
 8001c28:	095b      	lsrs	r3, r3, #5
 8001c2a:	2164      	movs	r1, #100	; 0x64
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	3332      	adds	r3, #50	; 0x32
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <UART_SetConfig+0x384>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	f003 0207 	and.w	r2, r3, #7
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4442      	add	r2, r8
 8001c48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001c4a:	e1b2      	b.n	8001fb2 <UART_SetConfig+0x6e2>
 8001c4c:	40011000 	.word	0x40011000
 8001c50:	40011400 	.word	0x40011400
 8001c54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4ad7      	ldr	r2, [pc, #860]	; (8001fbc <UART_SetConfig+0x6ec>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d005      	beq.n	8001c6e <UART_SetConfig+0x39e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4ad6      	ldr	r2, [pc, #856]	; (8001fc0 <UART_SetConfig+0x6f0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	f040 80d1 	bne.w	8001e10 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c6e:	f7ff fdcd 	bl	800180c <HAL_RCC_GetPCLK2Freq>
 8001c72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	469a      	mov	sl, r3
 8001c78:	f04f 0b00 	mov.w	fp, #0
 8001c7c:	46d0      	mov	r8, sl
 8001c7e:	46d9      	mov	r9, fp
 8001c80:	eb18 0308 	adds.w	r3, r8, r8
 8001c84:	eb49 0409 	adc.w	r4, r9, r9
 8001c88:	4698      	mov	r8, r3
 8001c8a:	46a1      	mov	r9, r4
 8001c8c:	eb18 080a 	adds.w	r8, r8, sl
 8001c90:	eb49 090b 	adc.w	r9, r9, fp
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ca0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ca4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ca8:	4688      	mov	r8, r1
 8001caa:	4691      	mov	r9, r2
 8001cac:	eb1a 0508 	adds.w	r5, sl, r8
 8001cb0:	eb4b 0609 	adc.w	r6, fp, r9
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	f04f 0400 	mov.w	r4, #0
 8001cc6:	0094      	lsls	r4, r2, #2
 8001cc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001ccc:	008b      	lsls	r3, r1, #2
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4623      	mov	r3, r4
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	4631      	mov	r1, r6
 8001cd6:	f7fe fa87 	bl	80001e8 <__aeabi_uldivmod>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4bb8      	ldr	r3, [pc, #736]	; (8001fc4 <UART_SetConfig+0x6f4>)
 8001ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	469b      	mov	fp, r3
 8001cf0:	f04f 0c00 	mov.w	ip, #0
 8001cf4:	46d9      	mov	r9, fp
 8001cf6:	46e2      	mov	sl, ip
 8001cf8:	eb19 0309 	adds.w	r3, r9, r9
 8001cfc:	eb4a 040a 	adc.w	r4, sl, sl
 8001d00:	4699      	mov	r9, r3
 8001d02:	46a2      	mov	sl, r4
 8001d04:	eb19 090b 	adds.w	r9, r9, fp
 8001d08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d20:	4689      	mov	r9, r1
 8001d22:	4692      	mov	sl, r2
 8001d24:	eb1b 0509 	adds.w	r5, fp, r9
 8001d28:	eb4c 060a 	adc.w	r6, ip, sl
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	f04f 0400 	mov.w	r4, #0
 8001d3e:	0094      	lsls	r4, r2, #2
 8001d40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001d44:	008b      	lsls	r3, r1, #2
 8001d46:	461a      	mov	r2, r3
 8001d48:	4623      	mov	r3, r4
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	4631      	mov	r1, r6
 8001d4e:	f7fe fa4b 	bl	80001e8 <__aeabi_uldivmod>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b9a      	ldr	r3, [pc, #616]	; (8001fc4 <UART_SetConfig+0x6f4>)
 8001d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2164      	movs	r1, #100	; 0x64
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	3332      	adds	r3, #50	; 0x32
 8001d6c:	4a95      	ldr	r2, [pc, #596]	; (8001fc4 <UART_SetConfig+0x6f4>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d78:	4498      	add	r8, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	469b      	mov	fp, r3
 8001d7e:	f04f 0c00 	mov.w	ip, #0
 8001d82:	46d9      	mov	r9, fp
 8001d84:	46e2      	mov	sl, ip
 8001d86:	eb19 0309 	adds.w	r3, r9, r9
 8001d8a:	eb4a 040a 	adc.w	r4, sl, sl
 8001d8e:	4699      	mov	r9, r3
 8001d90:	46a2      	mov	sl, r4
 8001d92:	eb19 090b 	adds.w	r9, r9, fp
 8001d96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001da6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001daa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001dae:	4689      	mov	r9, r1
 8001db0:	4692      	mov	sl, r2
 8001db2:	eb1b 0509 	adds.w	r5, fp, r9
 8001db6:	eb4c 060a 	adc.w	r6, ip, sl
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	f04f 0400 	mov.w	r4, #0
 8001dcc:	0094      	lsls	r4, r2, #2
 8001dce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001dd2:	008b      	lsls	r3, r1, #2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	4628      	mov	r0, r5
 8001dda:	4631      	mov	r1, r6
 8001ddc:	f7fe fa04 	bl	80001e8 <__aeabi_uldivmod>
 8001de0:	4603      	mov	r3, r0
 8001de2:	460c      	mov	r4, r1
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b77      	ldr	r3, [pc, #476]	; (8001fc4 <UART_SetConfig+0x6f4>)
 8001de8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	2164      	movs	r1, #100	; 0x64
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	3332      	adds	r3, #50	; 0x32
 8001dfa:	4a72      	ldr	r2, [pc, #456]	; (8001fc4 <UART_SetConfig+0x6f4>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4442      	add	r2, r8
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e0d0      	b.n	8001fb2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e10:	f7ff fce8 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001e14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	469a      	mov	sl, r3
 8001e1a:	f04f 0b00 	mov.w	fp, #0
 8001e1e:	46d0      	mov	r8, sl
 8001e20:	46d9      	mov	r9, fp
 8001e22:	eb18 0308 	adds.w	r3, r8, r8
 8001e26:	eb49 0409 	adc.w	r4, r9, r9
 8001e2a:	4698      	mov	r8, r3
 8001e2c:	46a1      	mov	r9, r4
 8001e2e:	eb18 080a 	adds.w	r8, r8, sl
 8001e32:	eb49 090b 	adc.w	r9, r9, fp
 8001e36:	f04f 0100 	mov.w	r1, #0
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e4a:	4688      	mov	r8, r1
 8001e4c:	4691      	mov	r9, r2
 8001e4e:	eb1a 0508 	adds.w	r5, sl, r8
 8001e52:	eb4b 0609 	adc.w	r6, fp, r9
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	f04f 0400 	mov.w	r4, #0
 8001e68:	0094      	lsls	r4, r2, #2
 8001e6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001e6e:	008b      	lsls	r3, r1, #2
 8001e70:	461a      	mov	r2, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	4628      	mov	r0, r5
 8001e76:	4631      	mov	r1, r6
 8001e78:	f7fe f9b6 	bl	80001e8 <__aeabi_uldivmod>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	460c      	mov	r4, r1
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <UART_SetConfig+0x6f4>)
 8001e84:	fba3 2302 	umull	r2, r3, r3, r2
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	469b      	mov	fp, r3
 8001e92:	f04f 0c00 	mov.w	ip, #0
 8001e96:	46d9      	mov	r9, fp
 8001e98:	46e2      	mov	sl, ip
 8001e9a:	eb19 0309 	adds.w	r3, r9, r9
 8001e9e:	eb4a 040a 	adc.w	r4, sl, sl
 8001ea2:	4699      	mov	r9, r3
 8001ea4:	46a2      	mov	sl, r4
 8001ea6:	eb19 090b 	adds.w	r9, r9, fp
 8001eaa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ebe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ec2:	4689      	mov	r9, r1
 8001ec4:	4692      	mov	sl, r2
 8001ec6:	eb1b 0509 	adds.w	r5, fp, r9
 8001eca:	eb4c 060a 	adc.w	r6, ip, sl
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	f04f 0400 	mov.w	r4, #0
 8001ee0:	0094      	lsls	r4, r2, #2
 8001ee2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001ee6:	008b      	lsls	r3, r1, #2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4623      	mov	r3, r4
 8001eec:	4628      	mov	r0, r5
 8001eee:	4631      	mov	r1, r6
 8001ef0:	f7fe f97a 	bl	80001e8 <__aeabi_uldivmod>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <UART_SetConfig+0x6f4>)
 8001efc:	fba3 1302 	umull	r1, r3, r3, r2
 8001f00:	095b      	lsrs	r3, r3, #5
 8001f02:	2164      	movs	r1, #100	; 0x64
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	3332      	adds	r3, #50	; 0x32
 8001f0e:	4a2d      	ldr	r2, [pc, #180]	; (8001fc4 <UART_SetConfig+0x6f4>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1a:	4498      	add	r8, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	469b      	mov	fp, r3
 8001f20:	f04f 0c00 	mov.w	ip, #0
 8001f24:	46d9      	mov	r9, fp
 8001f26:	46e2      	mov	sl, ip
 8001f28:	eb19 0309 	adds.w	r3, r9, r9
 8001f2c:	eb4a 040a 	adc.w	r4, sl, sl
 8001f30:	4699      	mov	r9, r3
 8001f32:	46a2      	mov	sl, r4
 8001f34:	eb19 090b 	adds.w	r9, r9, fp
 8001f38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001f3c:	f04f 0100 	mov.w	r1, #0
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f50:	4689      	mov	r9, r1
 8001f52:	4692      	mov	sl, r2
 8001f54:	eb1b 0509 	adds.w	r5, fp, r9
 8001f58:	eb4c 060a 	adc.w	r6, ip, sl
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	f04f 0400 	mov.w	r4, #0
 8001f6e:	0094      	lsls	r4, r2, #2
 8001f70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001f74:	008b      	lsls	r3, r1, #2
 8001f76:	461a      	mov	r2, r3
 8001f78:	4623      	mov	r3, r4
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	4631      	mov	r1, r6
 8001f7e:	f7fe f933 	bl	80001e8 <__aeabi_uldivmod>
 8001f82:	4603      	mov	r3, r0
 8001f84:	460c      	mov	r4, r1
 8001f86:	461a      	mov	r2, r3
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <UART_SetConfig+0x6f4>)
 8001f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2164      	movs	r1, #100	; 0x64
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	3332      	adds	r3, #50	; 0x32
 8001f9c:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <UART_SetConfig+0x6f4>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4442      	add	r2, r8
 8001fae:	609a      	str	r2, [r3, #8]
}
 8001fb0:	e7ff      	b.n	8001fb2 <UART_SetConfig+0x6e2>
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fbc:	40011000 	.word	0x40011000
 8001fc0:	40011400 	.word	0x40011400
 8001fc4:	51eb851f 	.word	0x51eb851f

08001fc8 <main_flash>:
#include "main.h"


uint32_t main_flash(void){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
	uint16_t wrBuf[5]= {0x1111,0x2222,0x3333,0x4444,0x5555};
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <main_flash+0x30>)
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fd4:	c303      	stmia	r3!, {r0, r1}
 8001fd6:	801a      	strh	r2, [r3, #0]
	FLASH_SetSectorAddrs(7, 0x08060000);
 8001fd8:	4908      	ldr	r1, [pc, #32]	; (8001ffc <main_flash+0x34>)
 8001fda:	2007      	movs	r0, #7
 8001fdc:	f000 f820 	bl	8002020 <FLASH_SetSectorAddrs>
	FLASH_WriteN(10, wrBuf, 5, DATA_TYPE_16);
 8001fe0:	1d39      	adds	r1, r7, #4
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	2205      	movs	r2, #5
 8001fe6:	200a      	movs	r0, #10
 8001fe8:	f000 f830 	bl	800204c <FLASH_WriteN>
//	while (1);
	return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08003468 	.word	0x08003468
 8001ffc:	08060000 	.word	0x08060000

08002000 <FLASH_EraseSector>:
static uint32_t MY_SectorAddrs;
static uint8_t MY_SectorNum;

/* Erase Sector */
static void FLASH_EraseSector(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002004:	f7fe fc48 	bl	8000898 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <FLASH_EraseSector+0x1c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2102      	movs	r1, #2
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fdb2 	bl	8000b78 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8002014:	f7fe fc62 	bl	80008dc <HAL_FLASH_Lock>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000098 	.word	0x20000098

08002020 <FLASH_SetSectorAddrs>:

/* Set Sector Adress */
void FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 800202c:	4a05      	ldr	r2, [pc, #20]	; (8002044 <FLASH_SetSectorAddrs+0x24>)
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <FLASH_SetSectorAddrs+0x28>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	20000098 	.word	0x20000098
 8002048:	20000094 	.word	0x20000094

0800204c <FLASH_WriteN>:

/* Write Flash */
void FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 800205a:	4b34      	ldr	r3, [pc, #208]	; (800212c <FLASH_WriteN+0xe0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4413      	add	r3, r2
 8002062:	61fb      	str	r3, [r7, #28]

	//Erase sector before write
	FLASH_EraseSector();
 8002064:	f7ff ffcc 	bl	8002000 <FLASH_EraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 8002068:	f7fe fc16 	bl	8000898 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d01e      	beq.n	80020b0 <FLASH_WriteN+0x64>
 8002072:	2b02      	cmp	r3, #2
 8002074:	d038      	beq.n	80020e8 <FLASH_WriteN+0x9c>
 8002076:	2b00      	cmp	r3, #0
 8002078:	d151      	bne.n	800211e <FLASH_WriteN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	e012      	b.n	80020a6 <FLASH_WriteN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4413      	add	r3, r2
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f04f 0400 	mov.w	r4, #0
 800208e:	461a      	mov	r2, r3
 8002090:	4623      	mov	r3, r4
 8002092:	69f9      	ldr	r1, [r7, #28]
 8002094:	2000      	movs	r0, #0
 8002096:	f7fe fbab 	bl	80007f0 <HAL_FLASH_Program>
					flashAddress++;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	3301      	adds	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d3e8      	bcc.n	8002080 <FLASH_WriteN+0x34>
				}
			break;
 80020ae:	e036      	b.n	800211e <FLASH_WriteN+0xd2>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	e013      	b.n	80020de <FLASH_WriteN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	4413      	add	r3, r2
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f04f 0400 	mov.w	r4, #0
 80020c6:	461a      	mov	r2, r3
 80020c8:	4623      	mov	r3, r4
 80020ca:	69f9      	ldr	r1, [r7, #28]
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7fe fb8f 	bl	80007f0 <HAL_FLASH_Program>
					flashAddress+=2;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3302      	adds	r3, #2
 80020d6:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d3e7      	bcc.n	80020b6 <FLASH_WriteN+0x6a>
				}
			break;
 80020e6:	e01a      	b.n	800211e <FLASH_WriteN+0xd2>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e012      	b.n	8002114 <FLASH_WriteN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4413      	add	r3, r2
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f04f 0400 	mov.w	r4, #0
 80020fc:	461a      	mov	r2, r3
 80020fe:	4623      	mov	r3, r4
 8002100:	69f9      	ldr	r1, [r7, #28]
 8002102:	2002      	movs	r0, #2
 8002104:	f7fe fb74 	bl	80007f0 <HAL_FLASH_Program>
					flashAddress+=4;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3304      	adds	r3, #4
 800210c:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	3301      	adds	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	d3e8      	bcc.n	80020ee <FLASH_WriteN+0xa2>
				}
			break;
 800211c:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 800211e:	f7fe fbdd 	bl	80008dc <HAL_FLASH_Lock>
}
 8002122:	bf00      	nop
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	20000094 	.word	0x20000094

08002130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002134:	f7fe f9d8 	bl	80004e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002138:	f000 f816 	bl	8002168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800213c:	f000 f8a6 	bl	800228c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002140:	f000 f87a 	bl	8002238 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
 8002144:	f001 f90a 	bl	800335c <initialise_monitor_handles>
  {
  }
#endif

#ifdef FLASH_TEST
  printf("flash is running\n");
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <main+0x30>)
 800214a:	f000 facd 	bl	80026e8 <puts>

  if (main_flash())
 800214e:	f7ff ff3b 	bl	8001fc8 <main_flash>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <main+0x2e>
  {
	  printf("error\n");
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <main+0x34>)
 800215a:	f000 fac5 	bl	80026e8 <puts>
  }
#endif

  /* USER CODE BEGIN WHILE */
  while (1);
 800215e:	e7fe      	b.n	800215e <main+0x2e>
 8002160:	08003474 	.word	0x08003474
 8002164:	08003488 	.word	0x08003488

08002168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b094      	sub	sp, #80	; 0x50
 800216c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	2230      	movs	r2, #48	; 0x30
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fa52 	bl	8002620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <SystemClock_Config+0xc8>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a26      	ldr	r2, [pc, #152]	; (8002230 <SystemClock_Config+0xc8>)
 8002196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b24      	ldr	r3, [pc, #144]	; (8002230 <SystemClock_Config+0xc8>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <SystemClock_Config+0xcc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a20      	ldr	r2, [pc, #128]	; (8002234 <SystemClock_Config+0xcc>)
 80021b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <SystemClock_Config+0xcc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021c4:	2302      	movs	r3, #2
 80021c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021c8:	2301      	movs	r3, #1
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021cc:	2310      	movs	r3, #16
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d0:	2302      	movs	r3, #2
 80021d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021d4:	2300      	movs	r3, #0
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021d8:	2308      	movs	r3, #8
 80021da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80021dc:	2364      	movs	r3, #100	; 0x64
 80021de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e0:	2302      	movs	r3, #2
 80021e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021e4:	2304      	movs	r3, #4
 80021e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe febf 	bl	8000f70 <HAL_RCC_OscConfig>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021f8:	f000 f8c0 	bl	800237c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021fc:	230f      	movs	r3, #15
 80021fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002200:	2302      	movs	r3, #2
 8002202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800220c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	2103      	movs	r1, #3
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f919 	bl	8001450 <HAL_RCC_ClockConfig>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002224:	f000 f8aa 	bl	800237c <Error_Handler>
  }
}
 8002228:	bf00      	nop
 800222a:	3750      	adds	r7, #80	; 0x50
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	40007000 	.word	0x40007000

08002238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <MX_USART2_UART_Init+0x4c>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <MX_USART2_UART_Init+0x50>)
 8002240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <MX_USART2_UART_Init+0x4c>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <MX_USART2_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_USART2_UART_Init+0x4c>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <MX_USART2_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_USART2_UART_Init+0x4c>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <MX_USART2_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_USART2_UART_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_USART2_UART_Init+0x4c>)
 8002270:	f7ff fae0 	bl	8001834 <HAL_UART_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800227a:	f000 f87f 	bl	800237c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000178 	.word	0x20000178
 8002288:	40004400 	.word	0x40004400

0800228c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b31      	ldr	r3, [pc, #196]	; (800236c <MX_GPIO_Init+0xe0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a30      	ldr	r2, [pc, #192]	; (800236c <MX_GPIO_Init+0xe0>)
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <MX_GPIO_Init+0xe0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <MX_GPIO_Init+0xe0>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a29      	ldr	r2, [pc, #164]	; (800236c <MX_GPIO_Init+0xe0>)
 80022c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <MX_GPIO_Init+0xe0>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	4b23      	ldr	r3, [pc, #140]	; (800236c <MX_GPIO_Init+0xe0>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a22      	ldr	r2, [pc, #136]	; (800236c <MX_GPIO_Init+0xe0>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <MX_GPIO_Init+0xe0>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_GPIO_Init+0xe0>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a1b      	ldr	r2, [pc, #108]	; (800236c <MX_GPIO_Init+0xe0>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_GPIO_Init+0xe0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	2120      	movs	r1, #32
 8002316:	4816      	ldr	r0, [pc, #88]	; (8002370 <MX_GPIO_Init+0xe4>)
 8002318:	f7fe fdf8 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800231c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <MX_GPIO_Init+0xe8>)
 8002324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	4619      	mov	r1, r3
 8002330:	4811      	ldr	r0, [pc, #68]	; (8002378 <MX_GPIO_Init+0xec>)
 8002332:	f7fe fc69 	bl	8000c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002336:	2320      	movs	r3, #32
 8002338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233a:	2301      	movs	r3, #1
 800233c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	4808      	ldr	r0, [pc, #32]	; (8002370 <MX_GPIO_Init+0xe4>)
 800234e:	f7fe fc5b 	bl	8000c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2028      	movs	r0, #40	; 0x28
 8002358:	f7fe fa13 	bl	8000782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800235c:	2028      	movs	r0, #40	; 0x28
 800235e:	f7fe fa2c 	bl	80007ba <HAL_NVIC_EnableIRQ>

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40020000 	.word	0x40020000
 8002374:	10210000 	.word	0x10210000
 8002378:	40020800 	.word	0x40020800

0800237c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_GPIO_EXTI_Callback>:

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	 printf("button is pressed\n");
 8002396:	4803      	ldr	r0, [pc, #12]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x18>)
 8002398:	f000 f9a6 	bl	80026e8 <puts>
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	08003490 	.word	0x08003490

080023a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_MspInit+0x4c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_MspInit+0x4c>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_MspInit+0x4c>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_MspInit+0x4c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_MspInit+0x4c>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_MspInit+0x4c>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023e6:	2007      	movs	r0, #7
 80023e8:	f7fe f9c0 	bl	800076c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800

080023f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_UART_MspInit+0x84>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d12b      	bne.n	8002472 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_UART_MspInit+0x88>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a17      	ldr	r2, [pc, #92]	; (8002480 <HAL_UART_MspInit+0x88>)
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_UART_MspInit+0x88>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_UART_MspInit+0x88>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a10      	ldr	r2, [pc, #64]	; (8002480 <HAL_UART_MspInit+0x88>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_UART_MspInit+0x88>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002452:	230c      	movs	r3, #12
 8002454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245e:	2303      	movs	r3, #3
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002462:	2307      	movs	r3, #7
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	; (8002484 <HAL_UART_MspInit+0x8c>)
 800246e:	f7fe fbcb 	bl	8000c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40004400 	.word	0x40004400
 8002480:	40023800 	.word	0x40023800
 8002484:	40020000 	.word	0x40020000

08002488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <HardFault_Handler+0x4>

0800249c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <MemManage_Handler+0x4>

080024a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <BusFault_Handler+0x4>

080024a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <UsageFault_Handler+0x4>

080024ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024dc:	f7fe f856 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024ec:	f7fe fd28 	bl	8000f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <_sbrk+0x50>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <_sbrk+0x16>
		heap_end = &end;
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <_sbrk+0x50>)
 8002506:	4a10      	ldr	r2, [pc, #64]	; (8002548 <_sbrk+0x54>)
 8002508:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <_sbrk+0x50>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <_sbrk+0x50>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	466a      	mov	r2, sp
 800251a:	4293      	cmp	r3, r2
 800251c:	d907      	bls.n	800252e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800251e:	f000 f855 	bl	80025cc <__errno>
 8002522:	4602      	mov	r2, r0
 8002524:	230c      	movs	r3, #12
 8002526:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
 800252c:	e006      	b.n	800253c <_sbrk+0x48>
	}

	heap_end += incr;
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <_sbrk+0x50>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <_sbrk+0x50>)
 8002538:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000009c 	.word	0x2000009c
 8002548:	200001c0 	.word	0x200001c0

0800254c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <SystemInit+0x28>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <SystemInit+0x28>)
 8002558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800255c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <SystemInit+0x28>)
 8002562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002566:	609a      	str	r2, [r3, #8]
#endif
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800257c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800257e:	e003      	b.n	8002588 <LoopCopyDataInit>

08002580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002586:	3104      	adds	r1, #4

08002588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002588:	480b      	ldr	r0, [pc, #44]	; (80025b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800258c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800258e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002590:	d3f6      	bcc.n	8002580 <CopyDataInit>
  ldr  r2, =_sbss
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002594:	e002      	b.n	800259c <LoopFillZerobss>

08002596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002598:	f842 3b04 	str.w	r3, [r2], #4

0800259c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800259e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025a0:	d3f9      	bcc.n	8002596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025a2:	f7ff ffd3 	bl	800254c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a6:	f000 f817 	bl	80025d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025aa:	f7ff fdc1 	bl	8002130 <main>
  bx  lr    
 80025ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80025b4:	0800354c 	.word	0x0800354c
  ldr  r0, =_sdata
 80025b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025bc:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80025c0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80025c4:	200001bc 	.word	0x200001bc

080025c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC_IRQHandler>
	...

080025cc <__errno>:
 80025cc:	4b01      	ldr	r3, [pc, #4]	; (80025d4 <__errno+0x8>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	2000000c 	.word	0x2000000c

080025d8 <__libc_init_array>:
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	4e0d      	ldr	r6, [pc, #52]	; (8002610 <__libc_init_array+0x38>)
 80025dc:	4c0d      	ldr	r4, [pc, #52]	; (8002614 <__libc_init_array+0x3c>)
 80025de:	1ba4      	subs	r4, r4, r6
 80025e0:	10a4      	asrs	r4, r4, #2
 80025e2:	2500      	movs	r5, #0
 80025e4:	42a5      	cmp	r5, r4
 80025e6:	d109      	bne.n	80025fc <__libc_init_array+0x24>
 80025e8:	4e0b      	ldr	r6, [pc, #44]	; (8002618 <__libc_init_array+0x40>)
 80025ea:	4c0c      	ldr	r4, [pc, #48]	; (800261c <__libc_init_array+0x44>)
 80025ec:	f000 ff30 	bl	8003450 <_init>
 80025f0:	1ba4      	subs	r4, r4, r6
 80025f2:	10a4      	asrs	r4, r4, #2
 80025f4:	2500      	movs	r5, #0
 80025f6:	42a5      	cmp	r5, r4
 80025f8:	d105      	bne.n	8002606 <__libc_init_array+0x2e>
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
 80025fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002600:	4798      	blx	r3
 8002602:	3501      	adds	r5, #1
 8002604:	e7ee      	b.n	80025e4 <__libc_init_array+0xc>
 8002606:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800260a:	4798      	blx	r3
 800260c:	3501      	adds	r5, #1
 800260e:	e7f2      	b.n	80025f6 <__libc_init_array+0x1e>
 8002610:	08003544 	.word	0x08003544
 8002614:	08003544 	.word	0x08003544
 8002618:	08003544 	.word	0x08003544
 800261c:	08003548 	.word	0x08003548

08002620 <memset>:
 8002620:	4402      	add	r2, r0
 8002622:	4603      	mov	r3, r0
 8002624:	4293      	cmp	r3, r2
 8002626:	d100      	bne.n	800262a <memset+0xa>
 8002628:	4770      	bx	lr
 800262a:	f803 1b01 	strb.w	r1, [r3], #1
 800262e:	e7f9      	b.n	8002624 <memset+0x4>

08002630 <_puts_r>:
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	460e      	mov	r6, r1
 8002634:	4605      	mov	r5, r0
 8002636:	b118      	cbz	r0, 8002640 <_puts_r+0x10>
 8002638:	6983      	ldr	r3, [r0, #24]
 800263a:	b90b      	cbnz	r3, 8002640 <_puts_r+0x10>
 800263c:	f000 fa0c 	bl	8002a58 <__sinit>
 8002640:	69ab      	ldr	r3, [r5, #24]
 8002642:	68ac      	ldr	r4, [r5, #8]
 8002644:	b913      	cbnz	r3, 800264c <_puts_r+0x1c>
 8002646:	4628      	mov	r0, r5
 8002648:	f000 fa06 	bl	8002a58 <__sinit>
 800264c:	4b23      	ldr	r3, [pc, #140]	; (80026dc <_puts_r+0xac>)
 800264e:	429c      	cmp	r4, r3
 8002650:	d117      	bne.n	8002682 <_puts_r+0x52>
 8002652:	686c      	ldr	r4, [r5, #4]
 8002654:	89a3      	ldrh	r3, [r4, #12]
 8002656:	071b      	lsls	r3, r3, #28
 8002658:	d51d      	bpl.n	8002696 <_puts_r+0x66>
 800265a:	6923      	ldr	r3, [r4, #16]
 800265c:	b1db      	cbz	r3, 8002696 <_puts_r+0x66>
 800265e:	3e01      	subs	r6, #1
 8002660:	68a3      	ldr	r3, [r4, #8]
 8002662:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002666:	3b01      	subs	r3, #1
 8002668:	60a3      	str	r3, [r4, #8]
 800266a:	b9e9      	cbnz	r1, 80026a8 <_puts_r+0x78>
 800266c:	2b00      	cmp	r3, #0
 800266e:	da2e      	bge.n	80026ce <_puts_r+0x9e>
 8002670:	4622      	mov	r2, r4
 8002672:	210a      	movs	r1, #10
 8002674:	4628      	mov	r0, r5
 8002676:	f000 f83f 	bl	80026f8 <__swbuf_r>
 800267a:	3001      	adds	r0, #1
 800267c:	d011      	beq.n	80026a2 <_puts_r+0x72>
 800267e:	200a      	movs	r0, #10
 8002680:	e011      	b.n	80026a6 <_puts_r+0x76>
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <_puts_r+0xb0>)
 8002684:	429c      	cmp	r4, r3
 8002686:	d101      	bne.n	800268c <_puts_r+0x5c>
 8002688:	68ac      	ldr	r4, [r5, #8]
 800268a:	e7e3      	b.n	8002654 <_puts_r+0x24>
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <_puts_r+0xb4>)
 800268e:	429c      	cmp	r4, r3
 8002690:	bf08      	it	eq
 8002692:	68ec      	ldreq	r4, [r5, #12]
 8002694:	e7de      	b.n	8002654 <_puts_r+0x24>
 8002696:	4621      	mov	r1, r4
 8002698:	4628      	mov	r0, r5
 800269a:	f000 f87f 	bl	800279c <__swsetup_r>
 800269e:	2800      	cmp	r0, #0
 80026a0:	d0dd      	beq.n	800265e <_puts_r+0x2e>
 80026a2:	f04f 30ff 	mov.w	r0, #4294967295
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da04      	bge.n	80026b6 <_puts_r+0x86>
 80026ac:	69a2      	ldr	r2, [r4, #24]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	dc06      	bgt.n	80026c0 <_puts_r+0x90>
 80026b2:	290a      	cmp	r1, #10
 80026b4:	d004      	beq.n	80026c0 <_puts_r+0x90>
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	6022      	str	r2, [r4, #0]
 80026bc:	7019      	strb	r1, [r3, #0]
 80026be:	e7cf      	b.n	8002660 <_puts_r+0x30>
 80026c0:	4622      	mov	r2, r4
 80026c2:	4628      	mov	r0, r5
 80026c4:	f000 f818 	bl	80026f8 <__swbuf_r>
 80026c8:	3001      	adds	r0, #1
 80026ca:	d1c9      	bne.n	8002660 <_puts_r+0x30>
 80026cc:	e7e9      	b.n	80026a2 <_puts_r+0x72>
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	200a      	movs	r0, #10
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	6022      	str	r2, [r4, #0]
 80026d6:	7018      	strb	r0, [r3, #0]
 80026d8:	e7e5      	b.n	80026a6 <_puts_r+0x76>
 80026da:	bf00      	nop
 80026dc:	080034e0 	.word	0x080034e0
 80026e0:	08003500 	.word	0x08003500
 80026e4:	080034c0 	.word	0x080034c0

080026e8 <puts>:
 80026e8:	4b02      	ldr	r3, [pc, #8]	; (80026f4 <puts+0xc>)
 80026ea:	4601      	mov	r1, r0
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	f7ff bf9f 	b.w	8002630 <_puts_r>
 80026f2:	bf00      	nop
 80026f4:	2000000c 	.word	0x2000000c

080026f8 <__swbuf_r>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	460e      	mov	r6, r1
 80026fc:	4614      	mov	r4, r2
 80026fe:	4605      	mov	r5, r0
 8002700:	b118      	cbz	r0, 800270a <__swbuf_r+0x12>
 8002702:	6983      	ldr	r3, [r0, #24]
 8002704:	b90b      	cbnz	r3, 800270a <__swbuf_r+0x12>
 8002706:	f000 f9a7 	bl	8002a58 <__sinit>
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <__swbuf_r+0x98>)
 800270c:	429c      	cmp	r4, r3
 800270e:	d12a      	bne.n	8002766 <__swbuf_r+0x6e>
 8002710:	686c      	ldr	r4, [r5, #4]
 8002712:	69a3      	ldr	r3, [r4, #24]
 8002714:	60a3      	str	r3, [r4, #8]
 8002716:	89a3      	ldrh	r3, [r4, #12]
 8002718:	071a      	lsls	r2, r3, #28
 800271a:	d52e      	bpl.n	800277a <__swbuf_r+0x82>
 800271c:	6923      	ldr	r3, [r4, #16]
 800271e:	b363      	cbz	r3, 800277a <__swbuf_r+0x82>
 8002720:	6923      	ldr	r3, [r4, #16]
 8002722:	6820      	ldr	r0, [r4, #0]
 8002724:	1ac0      	subs	r0, r0, r3
 8002726:	6963      	ldr	r3, [r4, #20]
 8002728:	b2f6      	uxtb	r6, r6
 800272a:	4283      	cmp	r3, r0
 800272c:	4637      	mov	r7, r6
 800272e:	dc04      	bgt.n	800273a <__swbuf_r+0x42>
 8002730:	4621      	mov	r1, r4
 8002732:	4628      	mov	r0, r5
 8002734:	f000 f926 	bl	8002984 <_fflush_r>
 8002738:	bb28      	cbnz	r0, 8002786 <__swbuf_r+0x8e>
 800273a:	68a3      	ldr	r3, [r4, #8]
 800273c:	3b01      	subs	r3, #1
 800273e:	60a3      	str	r3, [r4, #8]
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	6022      	str	r2, [r4, #0]
 8002746:	701e      	strb	r6, [r3, #0]
 8002748:	6963      	ldr	r3, [r4, #20]
 800274a:	3001      	adds	r0, #1
 800274c:	4283      	cmp	r3, r0
 800274e:	d004      	beq.n	800275a <__swbuf_r+0x62>
 8002750:	89a3      	ldrh	r3, [r4, #12]
 8002752:	07db      	lsls	r3, r3, #31
 8002754:	d519      	bpl.n	800278a <__swbuf_r+0x92>
 8002756:	2e0a      	cmp	r6, #10
 8002758:	d117      	bne.n	800278a <__swbuf_r+0x92>
 800275a:	4621      	mov	r1, r4
 800275c:	4628      	mov	r0, r5
 800275e:	f000 f911 	bl	8002984 <_fflush_r>
 8002762:	b190      	cbz	r0, 800278a <__swbuf_r+0x92>
 8002764:	e00f      	b.n	8002786 <__swbuf_r+0x8e>
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <__swbuf_r+0x9c>)
 8002768:	429c      	cmp	r4, r3
 800276a:	d101      	bne.n	8002770 <__swbuf_r+0x78>
 800276c:	68ac      	ldr	r4, [r5, #8]
 800276e:	e7d0      	b.n	8002712 <__swbuf_r+0x1a>
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <__swbuf_r+0xa0>)
 8002772:	429c      	cmp	r4, r3
 8002774:	bf08      	it	eq
 8002776:	68ec      	ldreq	r4, [r5, #12]
 8002778:	e7cb      	b.n	8002712 <__swbuf_r+0x1a>
 800277a:	4621      	mov	r1, r4
 800277c:	4628      	mov	r0, r5
 800277e:	f000 f80d 	bl	800279c <__swsetup_r>
 8002782:	2800      	cmp	r0, #0
 8002784:	d0cc      	beq.n	8002720 <__swbuf_r+0x28>
 8002786:	f04f 37ff 	mov.w	r7, #4294967295
 800278a:	4638      	mov	r0, r7
 800278c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800278e:	bf00      	nop
 8002790:	080034e0 	.word	0x080034e0
 8002794:	08003500 	.word	0x08003500
 8002798:	080034c0 	.word	0x080034c0

0800279c <__swsetup_r>:
 800279c:	4b32      	ldr	r3, [pc, #200]	; (8002868 <__swsetup_r+0xcc>)
 800279e:	b570      	push	{r4, r5, r6, lr}
 80027a0:	681d      	ldr	r5, [r3, #0]
 80027a2:	4606      	mov	r6, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	b125      	cbz	r5, 80027b2 <__swsetup_r+0x16>
 80027a8:	69ab      	ldr	r3, [r5, #24]
 80027aa:	b913      	cbnz	r3, 80027b2 <__swsetup_r+0x16>
 80027ac:	4628      	mov	r0, r5
 80027ae:	f000 f953 	bl	8002a58 <__sinit>
 80027b2:	4b2e      	ldr	r3, [pc, #184]	; (800286c <__swsetup_r+0xd0>)
 80027b4:	429c      	cmp	r4, r3
 80027b6:	d10f      	bne.n	80027d8 <__swsetup_r+0x3c>
 80027b8:	686c      	ldr	r4, [r5, #4]
 80027ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	0715      	lsls	r5, r2, #28
 80027c2:	d42c      	bmi.n	800281e <__swsetup_r+0x82>
 80027c4:	06d0      	lsls	r0, r2, #27
 80027c6:	d411      	bmi.n	80027ec <__swsetup_r+0x50>
 80027c8:	2209      	movs	r2, #9
 80027ca:	6032      	str	r2, [r6, #0]
 80027cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d0:	81a3      	strh	r3, [r4, #12]
 80027d2:	f04f 30ff 	mov.w	r0, #4294967295
 80027d6:	e03e      	b.n	8002856 <__swsetup_r+0xba>
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <__swsetup_r+0xd4>)
 80027da:	429c      	cmp	r4, r3
 80027dc:	d101      	bne.n	80027e2 <__swsetup_r+0x46>
 80027de:	68ac      	ldr	r4, [r5, #8]
 80027e0:	e7eb      	b.n	80027ba <__swsetup_r+0x1e>
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <__swsetup_r+0xd8>)
 80027e4:	429c      	cmp	r4, r3
 80027e6:	bf08      	it	eq
 80027e8:	68ec      	ldreq	r4, [r5, #12]
 80027ea:	e7e6      	b.n	80027ba <__swsetup_r+0x1e>
 80027ec:	0751      	lsls	r1, r2, #29
 80027ee:	d512      	bpl.n	8002816 <__swsetup_r+0x7a>
 80027f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027f2:	b141      	cbz	r1, 8002806 <__swsetup_r+0x6a>
 80027f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027f8:	4299      	cmp	r1, r3
 80027fa:	d002      	beq.n	8002802 <__swsetup_r+0x66>
 80027fc:	4630      	mov	r0, r6
 80027fe:	f000 fa19 	bl	8002c34 <_free_r>
 8002802:	2300      	movs	r3, #0
 8002804:	6363      	str	r3, [r4, #52]	; 0x34
 8002806:	89a3      	ldrh	r3, [r4, #12]
 8002808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800280c:	81a3      	strh	r3, [r4, #12]
 800280e:	2300      	movs	r3, #0
 8002810:	6063      	str	r3, [r4, #4]
 8002812:	6923      	ldr	r3, [r4, #16]
 8002814:	6023      	str	r3, [r4, #0]
 8002816:	89a3      	ldrh	r3, [r4, #12]
 8002818:	f043 0308 	orr.w	r3, r3, #8
 800281c:	81a3      	strh	r3, [r4, #12]
 800281e:	6923      	ldr	r3, [r4, #16]
 8002820:	b94b      	cbnz	r3, 8002836 <__swsetup_r+0x9a>
 8002822:	89a3      	ldrh	r3, [r4, #12]
 8002824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282c:	d003      	beq.n	8002836 <__swsetup_r+0x9a>
 800282e:	4621      	mov	r1, r4
 8002830:	4630      	mov	r0, r6
 8002832:	f000 f9bf 	bl	8002bb4 <__smakebuf_r>
 8002836:	89a2      	ldrh	r2, [r4, #12]
 8002838:	f012 0301 	ands.w	r3, r2, #1
 800283c:	d00c      	beq.n	8002858 <__swsetup_r+0xbc>
 800283e:	2300      	movs	r3, #0
 8002840:	60a3      	str	r3, [r4, #8]
 8002842:	6963      	ldr	r3, [r4, #20]
 8002844:	425b      	negs	r3, r3
 8002846:	61a3      	str	r3, [r4, #24]
 8002848:	6923      	ldr	r3, [r4, #16]
 800284a:	b953      	cbnz	r3, 8002862 <__swsetup_r+0xc6>
 800284c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002850:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002854:	d1ba      	bne.n	80027cc <__swsetup_r+0x30>
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	0792      	lsls	r2, r2, #30
 800285a:	bf58      	it	pl
 800285c:	6963      	ldrpl	r3, [r4, #20]
 800285e:	60a3      	str	r3, [r4, #8]
 8002860:	e7f2      	b.n	8002848 <__swsetup_r+0xac>
 8002862:	2000      	movs	r0, #0
 8002864:	e7f7      	b.n	8002856 <__swsetup_r+0xba>
 8002866:	bf00      	nop
 8002868:	2000000c 	.word	0x2000000c
 800286c:	080034e0 	.word	0x080034e0
 8002870:	08003500 	.word	0x08003500
 8002874:	080034c0 	.word	0x080034c0

08002878 <__sflush_r>:
 8002878:	898a      	ldrh	r2, [r1, #12]
 800287a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800287e:	4605      	mov	r5, r0
 8002880:	0710      	lsls	r0, r2, #28
 8002882:	460c      	mov	r4, r1
 8002884:	d458      	bmi.n	8002938 <__sflush_r+0xc0>
 8002886:	684b      	ldr	r3, [r1, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	dc05      	bgt.n	8002898 <__sflush_r+0x20>
 800288c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	dc02      	bgt.n	8002898 <__sflush_r+0x20>
 8002892:	2000      	movs	r0, #0
 8002894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800289a:	2e00      	cmp	r6, #0
 800289c:	d0f9      	beq.n	8002892 <__sflush_r+0x1a>
 800289e:	2300      	movs	r3, #0
 80028a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028a4:	682f      	ldr	r7, [r5, #0]
 80028a6:	6a21      	ldr	r1, [r4, #32]
 80028a8:	602b      	str	r3, [r5, #0]
 80028aa:	d032      	beq.n	8002912 <__sflush_r+0x9a>
 80028ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028ae:	89a3      	ldrh	r3, [r4, #12]
 80028b0:	075a      	lsls	r2, r3, #29
 80028b2:	d505      	bpl.n	80028c0 <__sflush_r+0x48>
 80028b4:	6863      	ldr	r3, [r4, #4]
 80028b6:	1ac0      	subs	r0, r0, r3
 80028b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028ba:	b10b      	cbz	r3, 80028c0 <__sflush_r+0x48>
 80028bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028be:	1ac0      	subs	r0, r0, r3
 80028c0:	2300      	movs	r3, #0
 80028c2:	4602      	mov	r2, r0
 80028c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028c6:	6a21      	ldr	r1, [r4, #32]
 80028c8:	4628      	mov	r0, r5
 80028ca:	47b0      	blx	r6
 80028cc:	1c43      	adds	r3, r0, #1
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	d106      	bne.n	80028e0 <__sflush_r+0x68>
 80028d2:	6829      	ldr	r1, [r5, #0]
 80028d4:	291d      	cmp	r1, #29
 80028d6:	d848      	bhi.n	800296a <__sflush_r+0xf2>
 80028d8:	4a29      	ldr	r2, [pc, #164]	; (8002980 <__sflush_r+0x108>)
 80028da:	40ca      	lsrs	r2, r1
 80028dc:	07d6      	lsls	r6, r2, #31
 80028de:	d544      	bpl.n	800296a <__sflush_r+0xf2>
 80028e0:	2200      	movs	r2, #0
 80028e2:	6062      	str	r2, [r4, #4]
 80028e4:	04d9      	lsls	r1, r3, #19
 80028e6:	6922      	ldr	r2, [r4, #16]
 80028e8:	6022      	str	r2, [r4, #0]
 80028ea:	d504      	bpl.n	80028f6 <__sflush_r+0x7e>
 80028ec:	1c42      	adds	r2, r0, #1
 80028ee:	d101      	bne.n	80028f4 <__sflush_r+0x7c>
 80028f0:	682b      	ldr	r3, [r5, #0]
 80028f2:	b903      	cbnz	r3, 80028f6 <__sflush_r+0x7e>
 80028f4:	6560      	str	r0, [r4, #84]	; 0x54
 80028f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028f8:	602f      	str	r7, [r5, #0]
 80028fa:	2900      	cmp	r1, #0
 80028fc:	d0c9      	beq.n	8002892 <__sflush_r+0x1a>
 80028fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002902:	4299      	cmp	r1, r3
 8002904:	d002      	beq.n	800290c <__sflush_r+0x94>
 8002906:	4628      	mov	r0, r5
 8002908:	f000 f994 	bl	8002c34 <_free_r>
 800290c:	2000      	movs	r0, #0
 800290e:	6360      	str	r0, [r4, #52]	; 0x34
 8002910:	e7c0      	b.n	8002894 <__sflush_r+0x1c>
 8002912:	2301      	movs	r3, #1
 8002914:	4628      	mov	r0, r5
 8002916:	47b0      	blx	r6
 8002918:	1c41      	adds	r1, r0, #1
 800291a:	d1c8      	bne.n	80028ae <__sflush_r+0x36>
 800291c:	682b      	ldr	r3, [r5, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0c5      	beq.n	80028ae <__sflush_r+0x36>
 8002922:	2b1d      	cmp	r3, #29
 8002924:	d001      	beq.n	800292a <__sflush_r+0xb2>
 8002926:	2b16      	cmp	r3, #22
 8002928:	d101      	bne.n	800292e <__sflush_r+0xb6>
 800292a:	602f      	str	r7, [r5, #0]
 800292c:	e7b1      	b.n	8002892 <__sflush_r+0x1a>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002934:	81a3      	strh	r3, [r4, #12]
 8002936:	e7ad      	b.n	8002894 <__sflush_r+0x1c>
 8002938:	690f      	ldr	r7, [r1, #16]
 800293a:	2f00      	cmp	r7, #0
 800293c:	d0a9      	beq.n	8002892 <__sflush_r+0x1a>
 800293e:	0793      	lsls	r3, r2, #30
 8002940:	680e      	ldr	r6, [r1, #0]
 8002942:	bf08      	it	eq
 8002944:	694b      	ldreq	r3, [r1, #20]
 8002946:	600f      	str	r7, [r1, #0]
 8002948:	bf18      	it	ne
 800294a:	2300      	movne	r3, #0
 800294c:	eba6 0807 	sub.w	r8, r6, r7
 8002950:	608b      	str	r3, [r1, #8]
 8002952:	f1b8 0f00 	cmp.w	r8, #0
 8002956:	dd9c      	ble.n	8002892 <__sflush_r+0x1a>
 8002958:	4643      	mov	r3, r8
 800295a:	463a      	mov	r2, r7
 800295c:	6a21      	ldr	r1, [r4, #32]
 800295e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002960:	4628      	mov	r0, r5
 8002962:	47b0      	blx	r6
 8002964:	2800      	cmp	r0, #0
 8002966:	dc06      	bgt.n	8002976 <__sflush_r+0xfe>
 8002968:	89a3      	ldrh	r3, [r4, #12]
 800296a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800296e:	81a3      	strh	r3, [r4, #12]
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	e78e      	b.n	8002894 <__sflush_r+0x1c>
 8002976:	4407      	add	r7, r0
 8002978:	eba8 0800 	sub.w	r8, r8, r0
 800297c:	e7e9      	b.n	8002952 <__sflush_r+0xda>
 800297e:	bf00      	nop
 8002980:	20400001 	.word	0x20400001

08002984 <_fflush_r>:
 8002984:	b538      	push	{r3, r4, r5, lr}
 8002986:	690b      	ldr	r3, [r1, #16]
 8002988:	4605      	mov	r5, r0
 800298a:	460c      	mov	r4, r1
 800298c:	b1db      	cbz	r3, 80029c6 <_fflush_r+0x42>
 800298e:	b118      	cbz	r0, 8002998 <_fflush_r+0x14>
 8002990:	6983      	ldr	r3, [r0, #24]
 8002992:	b90b      	cbnz	r3, 8002998 <_fflush_r+0x14>
 8002994:	f000 f860 	bl	8002a58 <__sinit>
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <_fflush_r+0x48>)
 800299a:	429c      	cmp	r4, r3
 800299c:	d109      	bne.n	80029b2 <_fflush_r+0x2e>
 800299e:	686c      	ldr	r4, [r5, #4]
 80029a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029a4:	b17b      	cbz	r3, 80029c6 <_fflush_r+0x42>
 80029a6:	4621      	mov	r1, r4
 80029a8:	4628      	mov	r0, r5
 80029aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029ae:	f7ff bf63 	b.w	8002878 <__sflush_r>
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <_fflush_r+0x4c>)
 80029b4:	429c      	cmp	r4, r3
 80029b6:	d101      	bne.n	80029bc <_fflush_r+0x38>
 80029b8:	68ac      	ldr	r4, [r5, #8]
 80029ba:	e7f1      	b.n	80029a0 <_fflush_r+0x1c>
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <_fflush_r+0x50>)
 80029be:	429c      	cmp	r4, r3
 80029c0:	bf08      	it	eq
 80029c2:	68ec      	ldreq	r4, [r5, #12]
 80029c4:	e7ec      	b.n	80029a0 <_fflush_r+0x1c>
 80029c6:	2000      	movs	r0, #0
 80029c8:	bd38      	pop	{r3, r4, r5, pc}
 80029ca:	bf00      	nop
 80029cc:	080034e0 	.word	0x080034e0
 80029d0:	08003500 	.word	0x08003500
 80029d4:	080034c0 	.word	0x080034c0

080029d8 <std>:
 80029d8:	2300      	movs	r3, #0
 80029da:	b510      	push	{r4, lr}
 80029dc:	4604      	mov	r4, r0
 80029de:	e9c0 3300 	strd	r3, r3, [r0]
 80029e2:	6083      	str	r3, [r0, #8]
 80029e4:	8181      	strh	r1, [r0, #12]
 80029e6:	6643      	str	r3, [r0, #100]	; 0x64
 80029e8:	81c2      	strh	r2, [r0, #14]
 80029ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029ee:	6183      	str	r3, [r0, #24]
 80029f0:	4619      	mov	r1, r3
 80029f2:	2208      	movs	r2, #8
 80029f4:	305c      	adds	r0, #92	; 0x5c
 80029f6:	f7ff fe13 	bl	8002620 <memset>
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <std+0x38>)
 80029fc:	6263      	str	r3, [r4, #36]	; 0x24
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <std+0x3c>)
 8002a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <std+0x40>)
 8002a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <std+0x44>)
 8002a08:	6224      	str	r4, [r4, #32]
 8002a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a0c:	bd10      	pop	{r4, pc}
 8002a0e:	bf00      	nop
 8002a10:	08002da5 	.word	0x08002da5
 8002a14:	08002dc7 	.word	0x08002dc7
 8002a18:	08002dff 	.word	0x08002dff
 8002a1c:	08002e23 	.word	0x08002e23

08002a20 <_cleanup_r>:
 8002a20:	4901      	ldr	r1, [pc, #4]	; (8002a28 <_cleanup_r+0x8>)
 8002a22:	f000 b885 	b.w	8002b30 <_fwalk_reent>
 8002a26:	bf00      	nop
 8002a28:	08002985 	.word	0x08002985

08002a2c <__sfmoreglue>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	1e4a      	subs	r2, r1, #1
 8002a30:	2568      	movs	r5, #104	; 0x68
 8002a32:	4355      	muls	r5, r2
 8002a34:	460e      	mov	r6, r1
 8002a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a3a:	f000 f949 	bl	8002cd0 <_malloc_r>
 8002a3e:	4604      	mov	r4, r0
 8002a40:	b140      	cbz	r0, 8002a54 <__sfmoreglue+0x28>
 8002a42:	2100      	movs	r1, #0
 8002a44:	e9c0 1600 	strd	r1, r6, [r0]
 8002a48:	300c      	adds	r0, #12
 8002a4a:	60a0      	str	r0, [r4, #8]
 8002a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a50:	f7ff fde6 	bl	8002620 <memset>
 8002a54:	4620      	mov	r0, r4
 8002a56:	bd70      	pop	{r4, r5, r6, pc}

08002a58 <__sinit>:
 8002a58:	6983      	ldr	r3, [r0, #24]
 8002a5a:	b510      	push	{r4, lr}
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	bb33      	cbnz	r3, 8002aae <__sinit+0x56>
 8002a60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002a64:	6503      	str	r3, [r0, #80]	; 0x50
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <__sinit+0x58>)
 8002a68:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <__sinit+0x5c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6282      	str	r2, [r0, #40]	; 0x28
 8002a6e:	4298      	cmp	r0, r3
 8002a70:	bf04      	itt	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	6183      	streq	r3, [r0, #24]
 8002a76:	f000 f81f 	bl	8002ab8 <__sfp>
 8002a7a:	6060      	str	r0, [r4, #4]
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f000 f81b 	bl	8002ab8 <__sfp>
 8002a82:	60a0      	str	r0, [r4, #8]
 8002a84:	4620      	mov	r0, r4
 8002a86:	f000 f817 	bl	8002ab8 <__sfp>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60e0      	str	r0, [r4, #12]
 8002a8e:	2104      	movs	r1, #4
 8002a90:	6860      	ldr	r0, [r4, #4]
 8002a92:	f7ff ffa1 	bl	80029d8 <std>
 8002a96:	2201      	movs	r2, #1
 8002a98:	2109      	movs	r1, #9
 8002a9a:	68a0      	ldr	r0, [r4, #8]
 8002a9c:	f7ff ff9c 	bl	80029d8 <std>
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	2112      	movs	r1, #18
 8002aa4:	68e0      	ldr	r0, [r4, #12]
 8002aa6:	f7ff ff97 	bl	80029d8 <std>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61a3      	str	r3, [r4, #24]
 8002aae:	bd10      	pop	{r4, pc}
 8002ab0:	080034bc 	.word	0x080034bc
 8002ab4:	08002a21 	.word	0x08002a21

08002ab8 <__sfp>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <__sfp+0x70>)
 8002abc:	681e      	ldr	r6, [r3, #0]
 8002abe:	69b3      	ldr	r3, [r6, #24]
 8002ac0:	4607      	mov	r7, r0
 8002ac2:	b913      	cbnz	r3, 8002aca <__sfp+0x12>
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f7ff ffc7 	bl	8002a58 <__sinit>
 8002aca:	3648      	adds	r6, #72	; 0x48
 8002acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	d503      	bpl.n	8002adc <__sfp+0x24>
 8002ad4:	6833      	ldr	r3, [r6, #0]
 8002ad6:	b133      	cbz	r3, 8002ae6 <__sfp+0x2e>
 8002ad8:	6836      	ldr	r6, [r6, #0]
 8002ada:	e7f7      	b.n	8002acc <__sfp+0x14>
 8002adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ae0:	b16d      	cbz	r5, 8002afe <__sfp+0x46>
 8002ae2:	3468      	adds	r4, #104	; 0x68
 8002ae4:	e7f4      	b.n	8002ad0 <__sfp+0x18>
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	4638      	mov	r0, r7
 8002aea:	f7ff ff9f 	bl	8002a2c <__sfmoreglue>
 8002aee:	6030      	str	r0, [r6, #0]
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d1f1      	bne.n	8002ad8 <__sfp+0x20>
 8002af4:	230c      	movs	r3, #12
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4604      	mov	r4, r0
 8002afa:	4620      	mov	r0, r4
 8002afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <__sfp+0x74>)
 8002b00:	6665      	str	r5, [r4, #100]	; 0x64
 8002b02:	e9c4 5500 	strd	r5, r5, [r4]
 8002b06:	60a5      	str	r5, [r4, #8]
 8002b08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002b0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002b10:	2208      	movs	r2, #8
 8002b12:	4629      	mov	r1, r5
 8002b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b18:	f7ff fd82 	bl	8002620 <memset>
 8002b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b24:	e7e9      	b.n	8002afa <__sfp+0x42>
 8002b26:	bf00      	nop
 8002b28:	080034bc 	.word	0x080034bc
 8002b2c:	ffff0001 	.word	0xffff0001

08002b30 <_fwalk_reent>:
 8002b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b34:	4680      	mov	r8, r0
 8002b36:	4689      	mov	r9, r1
 8002b38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b3c:	2600      	movs	r6, #0
 8002b3e:	b914      	cbnz	r4, 8002b46 <_fwalk_reent+0x16>
 8002b40:	4630      	mov	r0, r6
 8002b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002b4a:	3f01      	subs	r7, #1
 8002b4c:	d501      	bpl.n	8002b52 <_fwalk_reent+0x22>
 8002b4e:	6824      	ldr	r4, [r4, #0]
 8002b50:	e7f5      	b.n	8002b3e <_fwalk_reent+0xe>
 8002b52:	89ab      	ldrh	r3, [r5, #12]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d907      	bls.n	8002b68 <_fwalk_reent+0x38>
 8002b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	d003      	beq.n	8002b68 <_fwalk_reent+0x38>
 8002b60:	4629      	mov	r1, r5
 8002b62:	4640      	mov	r0, r8
 8002b64:	47c8      	blx	r9
 8002b66:	4306      	orrs	r6, r0
 8002b68:	3568      	adds	r5, #104	; 0x68
 8002b6a:	e7ee      	b.n	8002b4a <_fwalk_reent+0x1a>

08002b6c <__swhatbuf_r>:
 8002b6c:	b570      	push	{r4, r5, r6, lr}
 8002b6e:	460e      	mov	r6, r1
 8002b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b74:	2900      	cmp	r1, #0
 8002b76:	b096      	sub	sp, #88	; 0x58
 8002b78:	4614      	mov	r4, r2
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	da07      	bge.n	8002b8e <__swhatbuf_r+0x22>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	602b      	str	r3, [r5, #0]
 8002b82:	89b3      	ldrh	r3, [r6, #12]
 8002b84:	061a      	lsls	r2, r3, #24
 8002b86:	d410      	bmi.n	8002baa <__swhatbuf_r+0x3e>
 8002b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8c:	e00e      	b.n	8002bac <__swhatbuf_r+0x40>
 8002b8e:	466a      	mov	r2, sp
 8002b90:	f000 f96e 	bl	8002e70 <_fstat_r>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	dbf2      	blt.n	8002b7e <__swhatbuf_r+0x12>
 8002b98:	9a01      	ldr	r2, [sp, #4]
 8002b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ba2:	425a      	negs	r2, r3
 8002ba4:	415a      	adcs	r2, r3
 8002ba6:	602a      	str	r2, [r5, #0]
 8002ba8:	e7ee      	b.n	8002b88 <__swhatbuf_r+0x1c>
 8002baa:	2340      	movs	r3, #64	; 0x40
 8002bac:	2000      	movs	r0, #0
 8002bae:	6023      	str	r3, [r4, #0]
 8002bb0:	b016      	add	sp, #88	; 0x58
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}

08002bb4 <__smakebuf_r>:
 8002bb4:	898b      	ldrh	r3, [r1, #12]
 8002bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bb8:	079d      	lsls	r5, r3, #30
 8002bba:	4606      	mov	r6, r0
 8002bbc:	460c      	mov	r4, r1
 8002bbe:	d507      	bpl.n	8002bd0 <__smakebuf_r+0x1c>
 8002bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bc4:	6023      	str	r3, [r4, #0]
 8002bc6:	6123      	str	r3, [r4, #16]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	6163      	str	r3, [r4, #20]
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
 8002bd0:	ab01      	add	r3, sp, #4
 8002bd2:	466a      	mov	r2, sp
 8002bd4:	f7ff ffca 	bl	8002b6c <__swhatbuf_r>
 8002bd8:	9900      	ldr	r1, [sp, #0]
 8002bda:	4605      	mov	r5, r0
 8002bdc:	4630      	mov	r0, r6
 8002bde:	f000 f877 	bl	8002cd0 <_malloc_r>
 8002be2:	b948      	cbnz	r0, 8002bf8 <__smakebuf_r+0x44>
 8002be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002be8:	059a      	lsls	r2, r3, #22
 8002bea:	d4ef      	bmi.n	8002bcc <__smakebuf_r+0x18>
 8002bec:	f023 0303 	bic.w	r3, r3, #3
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	81a3      	strh	r3, [r4, #12]
 8002bf6:	e7e3      	b.n	8002bc0 <__smakebuf_r+0xc>
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <__smakebuf_r+0x7c>)
 8002bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8002bfc:	89a3      	ldrh	r3, [r4, #12]
 8002bfe:	6020      	str	r0, [r4, #0]
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	81a3      	strh	r3, [r4, #12]
 8002c06:	9b00      	ldr	r3, [sp, #0]
 8002c08:	6163      	str	r3, [r4, #20]
 8002c0a:	9b01      	ldr	r3, [sp, #4]
 8002c0c:	6120      	str	r0, [r4, #16]
 8002c0e:	b15b      	cbz	r3, 8002c28 <__smakebuf_r+0x74>
 8002c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c14:	4630      	mov	r0, r6
 8002c16:	f000 f93d 	bl	8002e94 <_isatty_r>
 8002c1a:	b128      	cbz	r0, 8002c28 <__smakebuf_r+0x74>
 8002c1c:	89a3      	ldrh	r3, [r4, #12]
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	81a3      	strh	r3, [r4, #12]
 8002c28:	89a3      	ldrh	r3, [r4, #12]
 8002c2a:	431d      	orrs	r5, r3
 8002c2c:	81a5      	strh	r5, [r4, #12]
 8002c2e:	e7cd      	b.n	8002bcc <__smakebuf_r+0x18>
 8002c30:	08002a21 	.word	0x08002a21

08002c34 <_free_r>:
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	4605      	mov	r5, r0
 8002c38:	2900      	cmp	r1, #0
 8002c3a:	d045      	beq.n	8002cc8 <_free_r+0x94>
 8002c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c40:	1f0c      	subs	r4, r1, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bfb8      	it	lt
 8002c46:	18e4      	addlt	r4, r4, r3
 8002c48:	f000 f946 	bl	8002ed8 <__malloc_lock>
 8002c4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <_free_r+0x98>)
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	4610      	mov	r0, r2
 8002c52:	b933      	cbnz	r3, 8002c62 <_free_r+0x2e>
 8002c54:	6063      	str	r3, [r4, #4]
 8002c56:	6014      	str	r4, [r2, #0]
 8002c58:	4628      	mov	r0, r5
 8002c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c5e:	f000 b93c 	b.w	8002eda <__malloc_unlock>
 8002c62:	42a3      	cmp	r3, r4
 8002c64:	d90c      	bls.n	8002c80 <_free_r+0x4c>
 8002c66:	6821      	ldr	r1, [r4, #0]
 8002c68:	1862      	adds	r2, r4, r1
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	bf04      	itt	eq
 8002c6e:	681a      	ldreq	r2, [r3, #0]
 8002c70:	685b      	ldreq	r3, [r3, #4]
 8002c72:	6063      	str	r3, [r4, #4]
 8002c74:	bf04      	itt	eq
 8002c76:	1852      	addeq	r2, r2, r1
 8002c78:	6022      	streq	r2, [r4, #0]
 8002c7a:	6004      	str	r4, [r0, #0]
 8002c7c:	e7ec      	b.n	8002c58 <_free_r+0x24>
 8002c7e:	4613      	mov	r3, r2
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	b10a      	cbz	r2, 8002c88 <_free_r+0x54>
 8002c84:	42a2      	cmp	r2, r4
 8002c86:	d9fa      	bls.n	8002c7e <_free_r+0x4a>
 8002c88:	6819      	ldr	r1, [r3, #0]
 8002c8a:	1858      	adds	r0, r3, r1
 8002c8c:	42a0      	cmp	r0, r4
 8002c8e:	d10b      	bne.n	8002ca8 <_free_r+0x74>
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	4401      	add	r1, r0
 8002c94:	1858      	adds	r0, r3, r1
 8002c96:	4282      	cmp	r2, r0
 8002c98:	6019      	str	r1, [r3, #0]
 8002c9a:	d1dd      	bne.n	8002c58 <_free_r+0x24>
 8002c9c:	6810      	ldr	r0, [r2, #0]
 8002c9e:	6852      	ldr	r2, [r2, #4]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	4401      	add	r1, r0
 8002ca4:	6019      	str	r1, [r3, #0]
 8002ca6:	e7d7      	b.n	8002c58 <_free_r+0x24>
 8002ca8:	d902      	bls.n	8002cb0 <_free_r+0x7c>
 8002caa:	230c      	movs	r3, #12
 8002cac:	602b      	str	r3, [r5, #0]
 8002cae:	e7d3      	b.n	8002c58 <_free_r+0x24>
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	1821      	adds	r1, r4, r0
 8002cb4:	428a      	cmp	r2, r1
 8002cb6:	bf04      	itt	eq
 8002cb8:	6811      	ldreq	r1, [r2, #0]
 8002cba:	6852      	ldreq	r2, [r2, #4]
 8002cbc:	6062      	str	r2, [r4, #4]
 8002cbe:	bf04      	itt	eq
 8002cc0:	1809      	addeq	r1, r1, r0
 8002cc2:	6021      	streq	r1, [r4, #0]
 8002cc4:	605c      	str	r4, [r3, #4]
 8002cc6:	e7c7      	b.n	8002c58 <_free_r+0x24>
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}
 8002cca:	bf00      	nop
 8002ccc:	200000a0 	.word	0x200000a0

08002cd0 <_malloc_r>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	1ccd      	adds	r5, r1, #3
 8002cd4:	f025 0503 	bic.w	r5, r5, #3
 8002cd8:	3508      	adds	r5, #8
 8002cda:	2d0c      	cmp	r5, #12
 8002cdc:	bf38      	it	cc
 8002cde:	250c      	movcc	r5, #12
 8002ce0:	2d00      	cmp	r5, #0
 8002ce2:	4606      	mov	r6, r0
 8002ce4:	db01      	blt.n	8002cea <_malloc_r+0x1a>
 8002ce6:	42a9      	cmp	r1, r5
 8002ce8:	d903      	bls.n	8002cf2 <_malloc_r+0x22>
 8002cea:	230c      	movs	r3, #12
 8002cec:	6033      	str	r3, [r6, #0]
 8002cee:	2000      	movs	r0, #0
 8002cf0:	bd70      	pop	{r4, r5, r6, pc}
 8002cf2:	f000 f8f1 	bl	8002ed8 <__malloc_lock>
 8002cf6:	4a21      	ldr	r2, [pc, #132]	; (8002d7c <_malloc_r+0xac>)
 8002cf8:	6814      	ldr	r4, [r2, #0]
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	b991      	cbnz	r1, 8002d24 <_malloc_r+0x54>
 8002cfe:	4c20      	ldr	r4, [pc, #128]	; (8002d80 <_malloc_r+0xb0>)
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	b91b      	cbnz	r3, 8002d0c <_malloc_r+0x3c>
 8002d04:	4630      	mov	r0, r6
 8002d06:	f000 f83d 	bl	8002d84 <_sbrk_r>
 8002d0a:	6020      	str	r0, [r4, #0]
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	4630      	mov	r0, r6
 8002d10:	f000 f838 	bl	8002d84 <_sbrk_r>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d124      	bne.n	8002d62 <_malloc_r+0x92>
 8002d18:	230c      	movs	r3, #12
 8002d1a:	6033      	str	r3, [r6, #0]
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	f000 f8dc 	bl	8002eda <__malloc_unlock>
 8002d22:	e7e4      	b.n	8002cee <_malloc_r+0x1e>
 8002d24:	680b      	ldr	r3, [r1, #0]
 8002d26:	1b5b      	subs	r3, r3, r5
 8002d28:	d418      	bmi.n	8002d5c <_malloc_r+0x8c>
 8002d2a:	2b0b      	cmp	r3, #11
 8002d2c:	d90f      	bls.n	8002d4e <_malloc_r+0x7e>
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	50cd      	str	r5, [r1, r3]
 8002d32:	18cc      	adds	r4, r1, r3
 8002d34:	4630      	mov	r0, r6
 8002d36:	f000 f8d0 	bl	8002eda <__malloc_unlock>
 8002d3a:	f104 000b 	add.w	r0, r4, #11
 8002d3e:	1d23      	adds	r3, r4, #4
 8002d40:	f020 0007 	bic.w	r0, r0, #7
 8002d44:	1ac3      	subs	r3, r0, r3
 8002d46:	d0d3      	beq.n	8002cf0 <_malloc_r+0x20>
 8002d48:	425a      	negs	r2, r3
 8002d4a:	50e2      	str	r2, [r4, r3]
 8002d4c:	e7d0      	b.n	8002cf0 <_malloc_r+0x20>
 8002d4e:	428c      	cmp	r4, r1
 8002d50:	684b      	ldr	r3, [r1, #4]
 8002d52:	bf16      	itet	ne
 8002d54:	6063      	strne	r3, [r4, #4]
 8002d56:	6013      	streq	r3, [r2, #0]
 8002d58:	460c      	movne	r4, r1
 8002d5a:	e7eb      	b.n	8002d34 <_malloc_r+0x64>
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	6849      	ldr	r1, [r1, #4]
 8002d60:	e7cc      	b.n	8002cfc <_malloc_r+0x2c>
 8002d62:	1cc4      	adds	r4, r0, #3
 8002d64:	f024 0403 	bic.w	r4, r4, #3
 8002d68:	42a0      	cmp	r0, r4
 8002d6a:	d005      	beq.n	8002d78 <_malloc_r+0xa8>
 8002d6c:	1a21      	subs	r1, r4, r0
 8002d6e:	4630      	mov	r0, r6
 8002d70:	f000 f808 	bl	8002d84 <_sbrk_r>
 8002d74:	3001      	adds	r0, #1
 8002d76:	d0cf      	beq.n	8002d18 <_malloc_r+0x48>
 8002d78:	6025      	str	r5, [r4, #0]
 8002d7a:	e7db      	b.n	8002d34 <_malloc_r+0x64>
 8002d7c:	200000a0 	.word	0x200000a0
 8002d80:	200000a4 	.word	0x200000a4

08002d84 <_sbrk_r>:
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	4c06      	ldr	r4, [pc, #24]	; (8002da0 <_sbrk_r+0x1c>)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	4605      	mov	r5, r0
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	6023      	str	r3, [r4, #0]
 8002d90:	f7ff fbb0 	bl	80024f4 <_sbrk>
 8002d94:	1c43      	adds	r3, r0, #1
 8002d96:	d102      	bne.n	8002d9e <_sbrk_r+0x1a>
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	b103      	cbz	r3, 8002d9e <_sbrk_r+0x1a>
 8002d9c:	602b      	str	r3, [r5, #0]
 8002d9e:	bd38      	pop	{r3, r4, r5, pc}
 8002da0:	200001b8 	.word	0x200001b8

08002da4 <__sread>:
 8002da4:	b510      	push	{r4, lr}
 8002da6:	460c      	mov	r4, r1
 8002da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dac:	f000 f896 	bl	8002edc <_read_r>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	bfab      	itete	ge
 8002db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002db6:	89a3      	ldrhlt	r3, [r4, #12]
 8002db8:	181b      	addge	r3, r3, r0
 8002dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002dbe:	bfac      	ite	ge
 8002dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002dc2:	81a3      	strhlt	r3, [r4, #12]
 8002dc4:	bd10      	pop	{r4, pc}

08002dc6 <__swrite>:
 8002dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dca:	461f      	mov	r7, r3
 8002dcc:	898b      	ldrh	r3, [r1, #12]
 8002dce:	05db      	lsls	r3, r3, #23
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	4616      	mov	r6, r2
 8002dd6:	d505      	bpl.n	8002de4 <__swrite+0x1e>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de0:	f000 f868 	bl	8002eb4 <_lseek_r>
 8002de4:	89a3      	ldrh	r3, [r4, #12]
 8002de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dee:	81a3      	strh	r3, [r4, #12]
 8002df0:	4632      	mov	r2, r6
 8002df2:	463b      	mov	r3, r7
 8002df4:	4628      	mov	r0, r5
 8002df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfa:	f000 b817 	b.w	8002e2c <_write_r>

08002dfe <__sseek>:
 8002dfe:	b510      	push	{r4, lr}
 8002e00:	460c      	mov	r4, r1
 8002e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e06:	f000 f855 	bl	8002eb4 <_lseek_r>
 8002e0a:	1c43      	adds	r3, r0, #1
 8002e0c:	89a3      	ldrh	r3, [r4, #12]
 8002e0e:	bf15      	itete	ne
 8002e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e1a:	81a3      	strheq	r3, [r4, #12]
 8002e1c:	bf18      	it	ne
 8002e1e:	81a3      	strhne	r3, [r4, #12]
 8002e20:	bd10      	pop	{r4, pc}

08002e22 <__sclose>:
 8002e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e26:	f000 b813 	b.w	8002e50 <_close_r>
	...

08002e2c <_write_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	4c07      	ldr	r4, [pc, #28]	; (8002e4c <_write_r+0x20>)
 8002e30:	4605      	mov	r5, r0
 8002e32:	4608      	mov	r0, r1
 8002e34:	4611      	mov	r1, r2
 8002e36:	2200      	movs	r2, #0
 8002e38:	6022      	str	r2, [r4, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f000 f911 	bl	8003062 <_write>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d102      	bne.n	8002e4a <_write_r+0x1e>
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	b103      	cbz	r3, 8002e4a <_write_r+0x1e>
 8002e48:	602b      	str	r3, [r5, #0]
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
 8002e4c:	200001b8 	.word	0x200001b8

08002e50 <_close_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4c06      	ldr	r4, [pc, #24]	; (8002e6c <_close_r+0x1c>)
 8002e54:	2300      	movs	r3, #0
 8002e56:	4605      	mov	r5, r0
 8002e58:	4608      	mov	r0, r1
 8002e5a:	6023      	str	r3, [r4, #0]
 8002e5c:	f000 f930 	bl	80030c0 <_close>
 8002e60:	1c43      	adds	r3, r0, #1
 8002e62:	d102      	bne.n	8002e6a <_close_r+0x1a>
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	b103      	cbz	r3, 8002e6a <_close_r+0x1a>
 8002e68:	602b      	str	r3, [r5, #0]
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
 8002e6c:	200001b8 	.word	0x200001b8

08002e70 <_fstat_r>:
 8002e70:	b538      	push	{r3, r4, r5, lr}
 8002e72:	4c07      	ldr	r4, [pc, #28]	; (8002e90 <_fstat_r+0x20>)
 8002e74:	2300      	movs	r3, #0
 8002e76:	4605      	mov	r5, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	f000 f966 	bl	800314e <_fstat>
 8002e82:	1c43      	adds	r3, r0, #1
 8002e84:	d102      	bne.n	8002e8c <_fstat_r+0x1c>
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	b103      	cbz	r3, 8002e8c <_fstat_r+0x1c>
 8002e8a:	602b      	str	r3, [r5, #0]
 8002e8c:	bd38      	pop	{r3, r4, r5, pc}
 8002e8e:	bf00      	nop
 8002e90:	200001b8 	.word	0x200001b8

08002e94 <_isatty_r>:
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	4c06      	ldr	r4, [pc, #24]	; (8002eb0 <_isatty_r+0x1c>)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	4605      	mov	r5, r0
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	f000 faba 	bl	8003418 <_isatty>
 8002ea4:	1c43      	adds	r3, r0, #1
 8002ea6:	d102      	bne.n	8002eae <_isatty_r+0x1a>
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	b103      	cbz	r3, 8002eae <_isatty_r+0x1a>
 8002eac:	602b      	str	r3, [r5, #0]
 8002eae:	bd38      	pop	{r3, r4, r5, pc}
 8002eb0:	200001b8 	.word	0x200001b8

08002eb4 <_lseek_r>:
 8002eb4:	b538      	push	{r3, r4, r5, lr}
 8002eb6:	4c07      	ldr	r4, [pc, #28]	; (8002ed4 <_lseek_r+0x20>)
 8002eb8:	4605      	mov	r5, r0
 8002eba:	4608      	mov	r0, r1
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	6022      	str	r2, [r4, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f000 f8bb 	bl	800303e <_lseek>
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	d102      	bne.n	8002ed2 <_lseek_r+0x1e>
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	b103      	cbz	r3, 8002ed2 <_lseek_r+0x1e>
 8002ed0:	602b      	str	r3, [r5, #0]
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
 8002ed4:	200001b8 	.word	0x200001b8

08002ed8 <__malloc_lock>:
 8002ed8:	4770      	bx	lr

08002eda <__malloc_unlock>:
 8002eda:	4770      	bx	lr

08002edc <_read_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4c07      	ldr	r4, [pc, #28]	; (8002efc <_read_r+0x20>)
 8002ee0:	4605      	mov	r5, r0
 8002ee2:	4608      	mov	r0, r1
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	6022      	str	r2, [r4, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 f850 	bl	8002f90 <_read>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d102      	bne.n	8002efa <_read_r+0x1e>
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	b103      	cbz	r3, 8002efa <_read_r+0x1e>
 8002ef8:	602b      	str	r3, [r5, #0]
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	200001b8 	.word	0x200001b8

08002f00 <findslot>:
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <findslot+0x2c>)
 8002f02:	b510      	push	{r4, lr}
 8002f04:	4604      	mov	r4, r0
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	b118      	cbz	r0, 8002f12 <findslot+0x12>
 8002f0a:	6983      	ldr	r3, [r0, #24]
 8002f0c:	b90b      	cbnz	r3, 8002f12 <findslot+0x12>
 8002f0e:	f7ff fda3 	bl	8002a58 <__sinit>
 8002f12:	2c13      	cmp	r4, #19
 8002f14:	d807      	bhi.n	8002f26 <findslot+0x26>
 8002f16:	4806      	ldr	r0, [pc, #24]	; (8002f30 <findslot+0x30>)
 8002f18:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	d002      	beq.n	8002f26 <findslot+0x26>
 8002f20:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002f24:	bd10      	pop	{r4, pc}
 8002f26:	2000      	movs	r0, #0
 8002f28:	e7fc      	b.n	8002f24 <findslot+0x24>
 8002f2a:	bf00      	nop
 8002f2c:	2000000c 	.word	0x2000000c
 8002f30:	200000b4 	.word	0x200000b4

08002f34 <checkerror>:
 8002f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f36:	1c43      	adds	r3, r0, #1
 8002f38:	4605      	mov	r5, r0
 8002f3a:	d109      	bne.n	8002f50 <checkerror+0x1c>
 8002f3c:	f7ff fb46 	bl	80025cc <__errno>
 8002f40:	2413      	movs	r4, #19
 8002f42:	4606      	mov	r6, r0
 8002f44:	2700      	movs	r7, #0
 8002f46:	4620      	mov	r0, r4
 8002f48:	4639      	mov	r1, r7
 8002f4a:	beab      	bkpt	0x00ab
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	6034      	str	r4, [r6, #0]
 8002f50:	4628      	mov	r0, r5
 8002f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f54 <error>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	4605      	mov	r5, r0
 8002f58:	f7ff fb38 	bl	80025cc <__errno>
 8002f5c:	2413      	movs	r4, #19
 8002f5e:	4606      	mov	r6, r0
 8002f60:	2700      	movs	r7, #0
 8002f62:	4620      	mov	r0, r4
 8002f64:	4639      	mov	r1, r7
 8002f66:	beab      	bkpt	0x00ab
 8002f68:	4604      	mov	r4, r0
 8002f6a:	6034      	str	r4, [r6, #0]
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f70 <_swiread>:
 8002f70:	b530      	push	{r4, r5, lr}
 8002f72:	b085      	sub	sp, #20
 8002f74:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002f78:	9203      	str	r2, [sp, #12]
 8002f7a:	2406      	movs	r4, #6
 8002f7c:	ad01      	add	r5, sp, #4
 8002f7e:	4620      	mov	r0, r4
 8002f80:	4629      	mov	r1, r5
 8002f82:	beab      	bkpt	0x00ab
 8002f84:	4604      	mov	r4, r0
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7ff ffd4 	bl	8002f34 <checkerror>
 8002f8c:	b005      	add	sp, #20
 8002f8e:	bd30      	pop	{r4, r5, pc}

08002f90 <_read>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	460e      	mov	r6, r1
 8002f94:	4615      	mov	r5, r2
 8002f96:	f7ff ffb3 	bl	8002f00 <findslot>
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	b930      	cbnz	r0, 8002fac <_read+0x1c>
 8002f9e:	f7ff fb15 	bl	80025cc <__errno>
 8002fa2:	2309      	movs	r3, #9
 8002fa4:	6003      	str	r3, [r0, #0]
 8002fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
 8002fac:	462a      	mov	r2, r5
 8002fae:	4631      	mov	r1, r6
 8002fb0:	6800      	ldr	r0, [r0, #0]
 8002fb2:	f7ff ffdd 	bl	8002f70 <_swiread>
 8002fb6:	1c43      	adds	r3, r0, #1
 8002fb8:	bf1f      	itttt	ne
 8002fba:	6863      	ldrne	r3, [r4, #4]
 8002fbc:	1a28      	subne	r0, r5, r0
 8002fbe:	181b      	addne	r3, r3, r0
 8002fc0:	6063      	strne	r3, [r4, #4]
 8002fc2:	e7f2      	b.n	8002faa <_read+0x1a>

08002fc4 <_swilseek>:
 8002fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	4616      	mov	r6, r2
 8002fca:	f7ff ff99 	bl	8002f00 <findslot>
 8002fce:	4605      	mov	r5, r0
 8002fd0:	b940      	cbnz	r0, 8002fe4 <_swilseek+0x20>
 8002fd2:	f7ff fafb 	bl	80025cc <__errno>
 8002fd6:	2309      	movs	r3, #9
 8002fd8:	6003      	str	r3, [r0, #0]
 8002fda:	f04f 34ff 	mov.w	r4, #4294967295
 8002fde:	4620      	mov	r0, r4
 8002fe0:	b003      	add	sp, #12
 8002fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe4:	2e02      	cmp	r6, #2
 8002fe6:	d903      	bls.n	8002ff0 <_swilseek+0x2c>
 8002fe8:	f7ff faf0 	bl	80025cc <__errno>
 8002fec:	2316      	movs	r3, #22
 8002fee:	e7f3      	b.n	8002fd8 <_swilseek+0x14>
 8002ff0:	2e01      	cmp	r6, #1
 8002ff2:	d112      	bne.n	800301a <_swilseek+0x56>
 8002ff4:	6843      	ldr	r3, [r0, #4]
 8002ff6:	18e4      	adds	r4, r4, r3
 8002ff8:	d4f6      	bmi.n	8002fe8 <_swilseek+0x24>
 8002ffa:	682b      	ldr	r3, [r5, #0]
 8002ffc:	260a      	movs	r6, #10
 8002ffe:	e9cd 3400 	strd	r3, r4, [sp]
 8003002:	466f      	mov	r7, sp
 8003004:	4630      	mov	r0, r6
 8003006:	4639      	mov	r1, r7
 8003008:	beab      	bkpt	0x00ab
 800300a:	4606      	mov	r6, r0
 800300c:	4630      	mov	r0, r6
 800300e:	f7ff ff91 	bl	8002f34 <checkerror>
 8003012:	2800      	cmp	r0, #0
 8003014:	dbe1      	blt.n	8002fda <_swilseek+0x16>
 8003016:	606c      	str	r4, [r5, #4]
 8003018:	e7e1      	b.n	8002fde <_swilseek+0x1a>
 800301a:	2e02      	cmp	r6, #2
 800301c:	d1ed      	bne.n	8002ffa <_swilseek+0x36>
 800301e:	af02      	add	r7, sp, #8
 8003020:	6803      	ldr	r3, [r0, #0]
 8003022:	f847 3d08 	str.w	r3, [r7, #-8]!
 8003026:	260c      	movs	r6, #12
 8003028:	4630      	mov	r0, r6
 800302a:	4639      	mov	r1, r7
 800302c:	beab      	bkpt	0x00ab
 800302e:	4606      	mov	r6, r0
 8003030:	4630      	mov	r0, r6
 8003032:	f7ff ff7f 	bl	8002f34 <checkerror>
 8003036:	1c43      	adds	r3, r0, #1
 8003038:	d0cf      	beq.n	8002fda <_swilseek+0x16>
 800303a:	4404      	add	r4, r0
 800303c:	e7dd      	b.n	8002ffa <_swilseek+0x36>

0800303e <_lseek>:
 800303e:	f7ff bfc1 	b.w	8002fc4 <_swilseek>

08003042 <_swiwrite>:
 8003042:	b530      	push	{r4, r5, lr}
 8003044:	b085      	sub	sp, #20
 8003046:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800304a:	9203      	str	r2, [sp, #12]
 800304c:	2405      	movs	r4, #5
 800304e:	ad01      	add	r5, sp, #4
 8003050:	4620      	mov	r0, r4
 8003052:	4629      	mov	r1, r5
 8003054:	beab      	bkpt	0x00ab
 8003056:	4604      	mov	r4, r0
 8003058:	4620      	mov	r0, r4
 800305a:	f7ff ff6b 	bl	8002f34 <checkerror>
 800305e:	b005      	add	sp, #20
 8003060:	bd30      	pop	{r4, r5, pc}

08003062 <_write>:
 8003062:	b570      	push	{r4, r5, r6, lr}
 8003064:	460e      	mov	r6, r1
 8003066:	4615      	mov	r5, r2
 8003068:	f7ff ff4a 	bl	8002f00 <findslot>
 800306c:	4604      	mov	r4, r0
 800306e:	b930      	cbnz	r0, 800307e <_write+0x1c>
 8003070:	f7ff faac 	bl	80025cc <__errno>
 8003074:	2309      	movs	r3, #9
 8003076:	6003      	str	r3, [r0, #0]
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	bd70      	pop	{r4, r5, r6, pc}
 800307e:	462a      	mov	r2, r5
 8003080:	4631      	mov	r1, r6
 8003082:	6800      	ldr	r0, [r0, #0]
 8003084:	f7ff ffdd 	bl	8003042 <_swiwrite>
 8003088:	1e02      	subs	r2, r0, #0
 800308a:	dbf5      	blt.n	8003078 <_write+0x16>
 800308c:	6863      	ldr	r3, [r4, #4]
 800308e:	1aa8      	subs	r0, r5, r2
 8003090:	4403      	add	r3, r0
 8003092:	42aa      	cmp	r2, r5
 8003094:	6063      	str	r3, [r4, #4]
 8003096:	d1f1      	bne.n	800307c <_write+0x1a>
 8003098:	2000      	movs	r0, #0
 800309a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800309e:	f7ff bf59 	b.w	8002f54 <error>

080030a2 <_swiclose>:
 80030a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030a4:	ad02      	add	r5, sp, #8
 80030a6:	2402      	movs	r4, #2
 80030a8:	f845 0d04 	str.w	r0, [r5, #-4]!
 80030ac:	4620      	mov	r0, r4
 80030ae:	4629      	mov	r1, r5
 80030b0:	beab      	bkpt	0x00ab
 80030b2:	4604      	mov	r4, r0
 80030b4:	4620      	mov	r0, r4
 80030b6:	f7ff ff3d 	bl	8002f34 <checkerror>
 80030ba:	b003      	add	sp, #12
 80030bc:	bd30      	pop	{r4, r5, pc}
	...

080030c0 <_close>:
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4605      	mov	r5, r0
 80030c4:	f7ff ff1c 	bl	8002f00 <findslot>
 80030c8:	4604      	mov	r4, r0
 80030ca:	b930      	cbnz	r0, 80030da <_close+0x1a>
 80030cc:	f7ff fa7e 	bl	80025cc <__errno>
 80030d0:	2309      	movs	r3, #9
 80030d2:	6003      	str	r3, [r0, #0]
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	bd38      	pop	{r3, r4, r5, pc}
 80030da:	3d01      	subs	r5, #1
 80030dc:	2d01      	cmp	r5, #1
 80030de:	d809      	bhi.n	80030f4 <_close+0x34>
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <_close+0x48>)
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d104      	bne.n	80030f4 <_close+0x34>
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	6003      	str	r3, [r0, #0]
 80030f0:	2000      	movs	r0, #0
 80030f2:	e7f1      	b.n	80030d8 <_close+0x18>
 80030f4:	6820      	ldr	r0, [r4, #0]
 80030f6:	f7ff ffd4 	bl	80030a2 <_swiclose>
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d1ec      	bne.n	80030d8 <_close+0x18>
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	6023      	str	r3, [r4, #0]
 8003104:	e7e8      	b.n	80030d8 <_close+0x18>
 8003106:	bf00      	nop
 8003108:	200000b4 	.word	0x200000b4

0800310c <_swistat>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	460c      	mov	r4, r1
 8003110:	f7ff fef6 	bl	8002f00 <findslot>
 8003114:	4606      	mov	r6, r0
 8003116:	b930      	cbnz	r0, 8003126 <_swistat+0x1a>
 8003118:	f7ff fa58 	bl	80025cc <__errno>
 800311c:	2309      	movs	r3, #9
 800311e:	6003      	str	r3, [r0, #0]
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	bd70      	pop	{r4, r5, r6, pc}
 8003126:	6863      	ldr	r3, [r4, #4]
 8003128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800312c:	6063      	str	r3, [r4, #4]
 800312e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003132:	6463      	str	r3, [r4, #68]	; 0x44
 8003134:	250c      	movs	r5, #12
 8003136:	4628      	mov	r0, r5
 8003138:	4631      	mov	r1, r6
 800313a:	beab      	bkpt	0x00ab
 800313c:	4605      	mov	r5, r0
 800313e:	4628      	mov	r0, r5
 8003140:	f7ff fef8 	bl	8002f34 <checkerror>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	bf1c      	itt	ne
 8003148:	6120      	strne	r0, [r4, #16]
 800314a:	2000      	movne	r0, #0
 800314c:	e7ea      	b.n	8003124 <_swistat+0x18>

0800314e <_fstat>:
 800314e:	460b      	mov	r3, r1
 8003150:	b510      	push	{r4, lr}
 8003152:	2100      	movs	r1, #0
 8003154:	4604      	mov	r4, r0
 8003156:	2258      	movs	r2, #88	; 0x58
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fa61 	bl	8002620 <memset>
 800315e:	4601      	mov	r1, r0
 8003160:	4620      	mov	r0, r4
 8003162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003166:	f7ff bfd1 	b.w	800310c <_swistat>

0800316a <_stat>:
 800316a:	b538      	push	{r3, r4, r5, lr}
 800316c:	460d      	mov	r5, r1
 800316e:	4604      	mov	r4, r0
 8003170:	2258      	movs	r2, #88	; 0x58
 8003172:	2100      	movs	r1, #0
 8003174:	4628      	mov	r0, r5
 8003176:	f7ff fa53 	bl	8002620 <memset>
 800317a:	4620      	mov	r0, r4
 800317c:	2100      	movs	r1, #0
 800317e:	f000 f811 	bl	80031a4 <_swiopen>
 8003182:	1c43      	adds	r3, r0, #1
 8003184:	4604      	mov	r4, r0
 8003186:	d00b      	beq.n	80031a0 <_stat+0x36>
 8003188:	686b      	ldr	r3, [r5, #4]
 800318a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800318e:	606b      	str	r3, [r5, #4]
 8003190:	4629      	mov	r1, r5
 8003192:	f7ff ffbb 	bl	800310c <_swistat>
 8003196:	4605      	mov	r5, r0
 8003198:	4620      	mov	r0, r4
 800319a:	f7ff ff91 	bl	80030c0 <_close>
 800319e:	462c      	mov	r4, r5
 80031a0:	4620      	mov	r0, r4
 80031a2:	bd38      	pop	{r3, r4, r5, pc}

080031a4 <_swiopen>:
 80031a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <_swiopen+0xb4>)
 80031aa:	b096      	sub	sp, #88	; 0x58
 80031ac:	4682      	mov	sl, r0
 80031ae:	460e      	mov	r6, r1
 80031b0:	2500      	movs	r5, #0
 80031b2:	4698      	mov	r8, r3
 80031b4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80031b8:	1c61      	adds	r1, r4, #1
 80031ba:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80031be:	d036      	beq.n	800322e <_swiopen+0x8a>
 80031c0:	3501      	adds	r5, #1
 80031c2:	2d14      	cmp	r5, #20
 80031c4:	d1f6      	bne.n	80031b4 <_swiopen+0x10>
 80031c6:	f7ff fa01 	bl	80025cc <__errno>
 80031ca:	2318      	movs	r3, #24
 80031cc:	6003      	str	r3, [r0, #0]
 80031ce:	f04f 34ff 	mov.w	r4, #4294967295
 80031d2:	e03c      	b.n	800324e <_swiopen+0xaa>
 80031d4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80031d8:	f240 6301 	movw	r3, #1537	; 0x601
 80031dc:	07b2      	lsls	r2, r6, #30
 80031de:	bf48      	it	mi
 80031e0:	f044 0402 	orrmi.w	r4, r4, #2
 80031e4:	421e      	tst	r6, r3
 80031e6:	bf18      	it	ne
 80031e8:	f044 0404 	orrne.w	r4, r4, #4
 80031ec:	0733      	lsls	r3, r6, #28
 80031ee:	bf48      	it	mi
 80031f0:	f024 0404 	bicmi.w	r4, r4, #4
 80031f4:	4650      	mov	r0, sl
 80031f6:	bf48      	it	mi
 80031f8:	f044 0408 	orrmi.w	r4, r4, #8
 80031fc:	f8cd a000 	str.w	sl, [sp]
 8003200:	f7fc ffea 	bl	80001d8 <strlen>
 8003204:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003208:	2401      	movs	r4, #1
 800320a:	4620      	mov	r0, r4
 800320c:	4649      	mov	r1, r9
 800320e:	beab      	bkpt	0x00ab
 8003210:	4604      	mov	r4, r0
 8003212:	2c00      	cmp	r4, #0
 8003214:	db06      	blt.n	8003224 <_swiopen+0x80>
 8003216:	4447      	add	r7, r8
 8003218:	2300      	movs	r3, #0
 800321a:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	462c      	mov	r4, r5
 8003222:	e014      	b.n	800324e <_swiopen+0xaa>
 8003224:	4620      	mov	r0, r4
 8003226:	f7ff fe95 	bl	8002f54 <error>
 800322a:	4604      	mov	r4, r0
 800322c:	e00f      	b.n	800324e <_swiopen+0xaa>
 800322e:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003232:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003236:	46e9      	mov	r9, sp
 8003238:	d1cc      	bne.n	80031d4 <_swiopen+0x30>
 800323a:	4649      	mov	r1, r9
 800323c:	4650      	mov	r0, sl
 800323e:	f7ff ff94 	bl	800316a <_stat>
 8003242:	3001      	adds	r0, #1
 8003244:	d0c6      	beq.n	80031d4 <_swiopen+0x30>
 8003246:	f7ff f9c1 	bl	80025cc <__errno>
 800324a:	2311      	movs	r3, #17
 800324c:	6003      	str	r3, [r0, #0]
 800324e:	4620      	mov	r0, r4
 8003250:	b016      	add	sp, #88	; 0x58
 8003252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003256:	bf00      	nop
 8003258:	200000b4 	.word	0x200000b4

0800325c <_get_semihosting_exts>:
 800325c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003260:	4607      	mov	r7, r0
 8003262:	4688      	mov	r8, r1
 8003264:	4829      	ldr	r0, [pc, #164]	; (800330c <_get_semihosting_exts+0xb0>)
 8003266:	2100      	movs	r1, #0
 8003268:	4615      	mov	r5, r2
 800326a:	f7ff ff9b 	bl	80031a4 <_swiopen>
 800326e:	462a      	mov	r2, r5
 8003270:	4604      	mov	r4, r0
 8003272:	2100      	movs	r1, #0
 8003274:	4638      	mov	r0, r7
 8003276:	f7ff f9d3 	bl	8002620 <memset>
 800327a:	1c63      	adds	r3, r4, #1
 800327c:	d015      	beq.n	80032aa <_get_semihosting_exts+0x4e>
 800327e:	4620      	mov	r0, r4
 8003280:	f7ff fe3e 	bl	8002f00 <findslot>
 8003284:	260c      	movs	r6, #12
 8003286:	4681      	mov	r9, r0
 8003288:	4630      	mov	r0, r6
 800328a:	4649      	mov	r1, r9
 800328c:	beab      	bkpt	0x00ab
 800328e:	4606      	mov	r6, r0
 8003290:	4630      	mov	r0, r6
 8003292:	f7ff fe4f 	bl	8002f34 <checkerror>
 8003296:	2803      	cmp	r0, #3
 8003298:	dd02      	ble.n	80032a0 <_get_semihosting_exts+0x44>
 800329a:	3803      	subs	r0, #3
 800329c:	42a8      	cmp	r0, r5
 800329e:	dc08      	bgt.n	80032b2 <_get_semihosting_exts+0x56>
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff ff0d 	bl	80030c0 <_close>
 80032a6:	f04f 34ff 	mov.w	r4, #4294967295
 80032aa:	4620      	mov	r0, r4
 80032ac:	b003      	add	sp, #12
 80032ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032b2:	2204      	movs	r2, #4
 80032b4:	eb0d 0102 	add.w	r1, sp, r2
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7ff fe69 	bl	8002f90 <_read>
 80032be:	2803      	cmp	r0, #3
 80032c0:	ddee      	ble.n	80032a0 <_get_semihosting_exts+0x44>
 80032c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80032c6:	2b53      	cmp	r3, #83	; 0x53
 80032c8:	d1ea      	bne.n	80032a0 <_get_semihosting_exts+0x44>
 80032ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80032ce:	2b48      	cmp	r3, #72	; 0x48
 80032d0:	d1e6      	bne.n	80032a0 <_get_semihosting_exts+0x44>
 80032d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80032d6:	2b46      	cmp	r3, #70	; 0x46
 80032d8:	d1e2      	bne.n	80032a0 <_get_semihosting_exts+0x44>
 80032da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80032de:	2b42      	cmp	r3, #66	; 0x42
 80032e0:	d1de      	bne.n	80032a0 <_get_semihosting_exts+0x44>
 80032e2:	2201      	movs	r2, #1
 80032e4:	4641      	mov	r1, r8
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff fe6c 	bl	8002fc4 <_swilseek>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	dbd7      	blt.n	80032a0 <_get_semihosting_exts+0x44>
 80032f0:	462a      	mov	r2, r5
 80032f2:	4639      	mov	r1, r7
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7ff fe4b 	bl	8002f90 <_read>
 80032fa:	4605      	mov	r5, r0
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff fedf 	bl	80030c0 <_close>
 8003302:	4628      	mov	r0, r5
 8003304:	f7ff fe16 	bl	8002f34 <checkerror>
 8003308:	4604      	mov	r4, r0
 800330a:	e7ce      	b.n	80032aa <_get_semihosting_exts+0x4e>
 800330c:	08003520 	.word	0x08003520

08003310 <initialise_semihosting_exts>:
 8003310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003312:	4d0a      	ldr	r5, [pc, #40]	; (800333c <initialise_semihosting_exts+0x2c>)
 8003314:	4c0a      	ldr	r4, [pc, #40]	; (8003340 <initialise_semihosting_exts+0x30>)
 8003316:	2100      	movs	r1, #0
 8003318:	2201      	movs	r2, #1
 800331a:	a801      	add	r0, sp, #4
 800331c:	6029      	str	r1, [r5, #0]
 800331e:	6022      	str	r2, [r4, #0]
 8003320:	f7ff ff9c 	bl	800325c <_get_semihosting_exts>
 8003324:	2800      	cmp	r0, #0
 8003326:	dd07      	ble.n	8003338 <initialise_semihosting_exts+0x28>
 8003328:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800332c:	f003 0201 	and.w	r2, r3, #1
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	602a      	str	r2, [r5, #0]
 8003336:	6023      	str	r3, [r4, #0]
 8003338:	b003      	add	sp, #12
 800333a:	bd30      	pop	{r4, r5, pc}
 800333c:	20000070 	.word	0x20000070
 8003340:	20000074 	.word	0x20000074

08003344 <_has_ext_stdout_stderr>:
 8003344:	b510      	push	{r4, lr}
 8003346:	4c04      	ldr	r4, [pc, #16]	; (8003358 <_has_ext_stdout_stderr+0x14>)
 8003348:	6822      	ldr	r2, [r4, #0]
 800334a:	2a00      	cmp	r2, #0
 800334c:	da01      	bge.n	8003352 <_has_ext_stdout_stderr+0xe>
 800334e:	f7ff ffdf 	bl	8003310 <initialise_semihosting_exts>
 8003352:	6820      	ldr	r0, [r4, #0]
 8003354:	bd10      	pop	{r4, pc}
 8003356:	bf00      	nop
 8003358:	20000074 	.word	0x20000074

0800335c <initialise_monitor_handles>:
 800335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003360:	b085      	sub	sp, #20
 8003362:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003414 <initialise_monitor_handles+0xb8>
 8003366:	f8cd 9004 	str.w	r9, [sp, #4]
 800336a:	2303      	movs	r3, #3
 800336c:	2400      	movs	r4, #0
 800336e:	9303      	str	r3, [sp, #12]
 8003370:	f10d 0804 	add.w	r8, sp, #4
 8003374:	9402      	str	r4, [sp, #8]
 8003376:	2501      	movs	r5, #1
 8003378:	4628      	mov	r0, r5
 800337a:	4641      	mov	r1, r8
 800337c:	beab      	bkpt	0x00ab
 800337e:	4605      	mov	r5, r0
 8003380:	4e20      	ldr	r6, [pc, #128]	; (8003404 <initialise_monitor_handles+0xa8>)
 8003382:	4a21      	ldr	r2, [pc, #132]	; (8003408 <initialise_monitor_handles+0xac>)
 8003384:	6035      	str	r5, [r6, #0]
 8003386:	4623      	mov	r3, r4
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	4614      	mov	r4, r2
 800338e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8003392:	3301      	adds	r3, #1
 8003394:	2b14      	cmp	r3, #20
 8003396:	d1fa      	bne.n	800338e <initialise_monitor_handles+0x32>
 8003398:	f7ff ffd4 	bl	8003344 <_has_ext_stdout_stderr>
 800339c:	4d1b      	ldr	r5, [pc, #108]	; (800340c <initialise_monitor_handles+0xb0>)
 800339e:	b1d0      	cbz	r0, 80033d6 <initialise_monitor_handles+0x7a>
 80033a0:	f04f 0a03 	mov.w	sl, #3
 80033a4:	2304      	movs	r3, #4
 80033a6:	f8cd 9004 	str.w	r9, [sp, #4]
 80033aa:	2701      	movs	r7, #1
 80033ac:	f8cd a00c 	str.w	sl, [sp, #12]
 80033b0:	9302      	str	r3, [sp, #8]
 80033b2:	4638      	mov	r0, r7
 80033b4:	4641      	mov	r1, r8
 80033b6:	beab      	bkpt	0x00ab
 80033b8:	4683      	mov	fp, r0
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <initialise_monitor_handles+0xb4>)
 80033bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80033c0:	f8c3 b000 	str.w	fp, [r3]
 80033c4:	2308      	movs	r3, #8
 80033c6:	f8cd a00c 	str.w	sl, [sp, #12]
 80033ca:	9302      	str	r3, [sp, #8]
 80033cc:	4638      	mov	r0, r7
 80033ce:	4641      	mov	r1, r8
 80033d0:	beab      	bkpt	0x00ab
 80033d2:	4607      	mov	r7, r0
 80033d4:	602f      	str	r7, [r5, #0]
 80033d6:	682b      	ldr	r3, [r5, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	bf02      	ittt	eq
 80033dc:	4b0c      	ldreq	r3, [pc, #48]	; (8003410 <initialise_monitor_handles+0xb4>)
 80033de:	681b      	ldreq	r3, [r3, #0]
 80033e0:	602b      	streq	r3, [r5, #0]
 80033e2:	6833      	ldr	r3, [r6, #0]
 80033e4:	6023      	str	r3, [r4, #0]
 80033e6:	2600      	movs	r6, #0
 80033e8:	6066      	str	r6, [r4, #4]
 80033ea:	f7ff ffab 	bl	8003344 <_has_ext_stdout_stderr>
 80033ee:	b130      	cbz	r0, 80033fe <initialise_monitor_handles+0xa2>
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <initialise_monitor_handles+0xb4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80033fe:	b005      	add	sp, #20
 8003400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003404:	200000ac 	.word	0x200000ac
 8003408:	200000b4 	.word	0x200000b4
 800340c:	200000a8 	.word	0x200000a8
 8003410:	200000b0 	.word	0x200000b0
 8003414:	08003536 	.word	0x08003536

08003418 <_isatty>:
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	f7ff fd71 	bl	8002f00 <findslot>
 800341e:	2509      	movs	r5, #9
 8003420:	4604      	mov	r4, r0
 8003422:	b920      	cbnz	r0, 800342e <_isatty+0x16>
 8003424:	f7ff f8d2 	bl	80025cc <__errno>
 8003428:	6005      	str	r5, [r0, #0]
 800342a:	4620      	mov	r0, r4
 800342c:	bd70      	pop	{r4, r5, r6, pc}
 800342e:	4628      	mov	r0, r5
 8003430:	4621      	mov	r1, r4
 8003432:	beab      	bkpt	0x00ab
 8003434:	4604      	mov	r4, r0
 8003436:	2c01      	cmp	r4, #1
 8003438:	d0f7      	beq.n	800342a <_isatty+0x12>
 800343a:	f7ff f8c7 	bl	80025cc <__errno>
 800343e:	2400      	movs	r4, #0
 8003440:	4606      	mov	r6, r0
 8003442:	2513      	movs	r5, #19
 8003444:	4628      	mov	r0, r5
 8003446:	4621      	mov	r1, r4
 8003448:	beab      	bkpt	0x00ab
 800344a:	4605      	mov	r5, r0
 800344c:	6035      	str	r5, [r6, #0]
 800344e:	e7ec      	b.n	800342a <_isatty+0x12>

08003450 <_init>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr

0800345c <_fini>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr
